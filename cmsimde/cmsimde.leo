<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2"/>
<globals/>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="leo.20190515144024.1"><vh>@settings</vh>
<v t="leo.20190515144024.2"><vh>@data qt-gui-plugin-style-sheet</vh></v>
<v t="leo.20190515144024.3"><vh>@string initial_split_orientation = horizontal</vh></v>
</v>
<v t="leo.20201127112020.1"><vh>About</vh>
<v t="leo.20210320213557.1"><vh>cmsimde</vh></v>
<v t="leo.20210320210418.1"><vh>assemble content.htm</vh></v>
<v t="leo.20210424092822.1"><vh>202104 修改</vh></v>
<v t="yen.20210707134934.1"><vh>202107 修改</vh>
<v t="yen.20210710222238.1"><vh>標題特殊符號移除</vh></v>
</v>
<v t="leo.20220911144657.1"><vh>202209 修改</vh>
<v t="leo.20220924163559.1"><vh>config/config 問題</vh></v>
</v>
<v t="leo.20221017090940.1"><vh>202210 修改</vh></v>
</v>
<v t="leo.20190515144242.1"><vh>@clean wsgi.py</vh>
<v t="leo.20190515144254.1"><vh>Declarations (wsgi.py)</vh></v>
</v>
<v t="leo.20190515144224.1"><vh>@clean flaskapp.py</vh>
<v t="leo.20190515144237.1"><vh>Declarations (flaskapp.py)</vh></v>
<v t="leo.20221017090913.1"><vh>acpForm</vh></v>
<v t="yen.20210708085937.1"><vh>password_generator</vh></v>
<v t="leo.20190515144237.2"><vh>checkLogin (flaskapp.py)</vh></v>
<v t="yen.20200710111924.1"><vh>checkMath</vh></v>
<v t="leo.20221005075601.1"><vh>correct_url</vh></v>
<v t="leo.20190515144237.3"><vh>delete_file (flaskapp.py)</vh></v>
<v t="leo.20190515144237.4"><vh>doDelete (flaskapp.py)</vh></v>
<v t="leo.20221017090933.1"><vh>doAcp</vh></v>
<v t="leo.20190515144237.5"><vh>doSearch (flaskapp.py)</vh></v>
<v t="leo.20190515144237.6"><vh>download (flaskapp.py)</vh></v>
<v t="leo.20190515144237.7"><vh>download_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.8"><vh>downloadlist_access_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.9"><vh>downloads (flaskapp.py)</vh></v>
<v t="leo.20190515144237.10"><vh>downloadselect_access_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.11"><vh>edit_config (flaskapp.py)</vh></v>
<v t="leo.20190515144237.12"><vh>edit_page (flaskapp.py)</vh></v>
<v t="leo.20190515144237.13"><vh>editorfoot (flaskapp.py)</vh></v>
<v t="leo.20190515144237.14"><vh>editorhead (flaskapp.py)</vh></v>
<v t="leo.20190515144237.15"><vh>error_log (flaskapp.py)</vh></v>
<v t="yen.20210704112438.1"><vh>favicon.ico</vh></v>
<v t="leo.20190515144237.16"><vh>file_get_contents (flaskapp.py)</vh></v>
<v t="leo.20190515144237.17"><vh>file_lister (flaskapp.py)</vh></v>
<v t="leo.20190515144237.18"><vh>file_selector (flaskapp.py)</vh></v>
<v t="leo.20190515144237.19"><vh>file_selector_script (flaskapp.py)</vh></v>
<v t="leo.20190515144237.20"><vh>fileaxupload (flaskapp.py)</vh></v>
<v t="leo.20190515144237.21"><vh>fileuploadform (flaskapp.py)</vh></v>
<v t="leo.20190515144237.22"><vh>flvplayer (flaskapp.py)</vh></v>
<v t="leo.20190515144237.23"><vh>generate_pages (flaskapp.py)</vh></v>
<v t="leo.20190515144237.24"><vh>get_page (flaskapp.py)</vh></v>
<v t="yen.20210708234039.1"><vh>get_page2 (flaskapp.py)</vh></v>
<v t="leo.20190515144237.26"><vh>image_delete_file (flaskapp.py)</vh></v>
<v t="leo.20190515144237.27"><vh>image_doDelete (flaskapp.py)</vh></v>
<v t="leo.20190515144237.28"><vh>image_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.29"><vh>imageaxupload (flaskapp.py)</vh></v>
<v t="leo.20190515144237.30"><vh>imagelist_access_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.31"><vh>imageselect_access_list (flaskapp.py)</vh></v>
<v t="leo.20190515144237.32"><vh>imageuploadform (flaskapp.py)</vh></v>
<v t="leo.20190515144237.33"><vh>index (flaskapp.py)</vh></v>
<v t="leo.20190515144237.34"><vh>isAdmin (flaskapp.py)</vh></v>
<v t="leo.20190515144237.35"><vh>listdir (flaskapp.py)</vh></v>
<v t="leo.20190515144237.36"><vh>load_list (flaskapp.py)</vh></v>
<v t="leo.20190515144238.1"><vh>loadlist_access_list (flaskapp.py)</vh></v>
<v t="leo.20190515144238.2"><vh>login (flaskapp.py)</vh></v>
<v t="leo.20190515144238.3"><vh>logout (flaskapp.py)</vh></v>
<v t="leo.20190515144238.4"><vh>parse_config (flaskapp.py)</vh></v>
<v t="leo.20190515144238.5"><vh>_remove_h123_attrs (flaskapp.py)</vh></v>
<v t="leo.20190515144238.6"><vh>parse_content (flaskapp.py)</vh></v>
<v t="leo.20190515144238.7"><vh>render_menu (flaskapp.py)</vh></v>
<v t="leo.20190515144238.8"><vh>render_menu2 (flaskapp.py)</vh></v>
<v t="leo.20190515144238.9"><vh>render_menu3 (flaskapp.py)</vh></v>
<v t="leo.20190515144238.10"><vh>saveConfig (flaskapp.py)</vh></v>
<v t="leo.20190515144238.11"><vh>savePage (flaskapp.py)</vh></v>
<v t="leo.20190515144238.12"><vh>search_content (flaskapp.py)</vh></v>
<v t="leo.20190515144238.13"><vh>search_form (flaskapp.py)</vh></v>
<v t="leo.20190515144238.14"><vh>send_file (flaskapp.py)</vh></v>
<v t="leo.20190515144238.15"><vh>send_images (flaskapp.py)</vh></v>
<v t="leo.20190515144238.16"><vh>send_static (flaskapp.py)</vh></v>
<v t="leo.20190515144238.17"><vh>set_admin_css (flaskapp.py)</vh></v>
<v t="leo.20190515144238.18"><vh>set_css (flaskapp.py)</vh></v>
<v t="leo.20190515144238.19"><vh>set_css2 (flaskapp.py)</vh></v>
<v t="leo.20190515144238.20"><vh>set_footer (flaskapp.py)</vh></v>
<v t="leo.20190515144238.21"><vh>sitemap (flaskapp.py)</vh></v>
<v t="leo.20190515144238.22"><vh>sitemap2 (flaskapp.py)</vh></v>
<v t="leo.20190515144238.23"><vh>sizeof_fmt (flaskapp.py)</vh></v>
<v t="leo.20190515144238.24"><vh>ssavePage (flaskapp.py)</vh></v>
<v t="yen.20210906215717.1"><vh>start_static</vh></v>
<v t="leo.20190515144238.25"><vh>syntaxhighlight (flaskapp.py)</vh></v>
<v t="leo.20190515144238.26"><vh>syntaxhighlight2 (flaskapp.py)</vh></v>
<v t="leo.20190515144238.27"><vh>tinymce_editor (flaskapp.py)</vh></v>
<v t="leo.20190515144238.28"><vh>unique (flaskapp.py)</vh></v>
<v t="leo.20201127112424.1"><vh>merge_sequence</vh></v>
<v t="leo.20201127112439.1"><vh>snTosr</vh></v>
</v>
<v t="leo.20190603204847.1"><vh>@path up_dir</vh>
<v t="leo.20190603204921.1"><vh>@clean init.py</vh>
<v t="leo.20190603204931.1"><vh>Declarations (init.py)</vh></v>
<v t="leo.20190603204931.2"><vh>class Init(object)</vh>
<v t="leo.20190603204931.3"><vh>Init(object).__init__</vh></v>
</v>
</v>
<v t="leo.20190603205008.1"><vh>@clean user.py</vh>
<v t="leo.20190603205008.2"><vh>Declarations (user.py)</vh></v>
<v t="leo.20190603205008.3"><vh>index (user.py)</vh></v>
<v t="leo.20190603205008.4"><vh>threegear (user.py)</vh></v>
</v>
<v t="leo.20220911145040.1"><vh>@edit main.py</vh></v>
<v t="leo.20220911145111.1"><vh>@edit nocache.py</vh></v>
<v t="leo.20220911145241.1"><vh>@edit .gitignore</vh></v>
</v>
</vnodes>
<tnodes>
<t tx="leo.20190515144024.1"></t>
<t tx="leo.20190515144024.2">QSplitter::handle {
    background-color: #CAE1FF; /* lightSteelBlue1 */
}

QStackedWidget {
    /* background-color:lightpink; */
    border-color: red;
    padding: 0px;
    /* border-width: 0px; */
    /* background-color: yellow; */
}

QSplitter {
    border-color: white;
    background-color: white;
    border-style: solid;
}

QTreeWidget {
    /* These apply to the selected item, but not to editing items.*/
    background-color: #ffffec; /* Leo's traditional tree color */
    selection-color: black; /* was white */
    selection-background-color: lightgrey;
    /* font-family: SansSerif; */
    /*font-family: DejaVu Sans Mono;*/
    font-family:YaHei Mono;
    /* 標題字型大小設定 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
 }

/* Headline edit widgets */
QTreeWidget QLineEdit {
    background-color: cornsilk;
    selection-color: white;
    selection-background-color: blue;
    /*font-family: DejaVu Sans Mono;*/    
    font-family:YaHei Mono;
    /* 沒有特別對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The log panes */
QTextEdit {
    background-color: #f2fdff;
    selection-color: red;
    selection-background-color: blue;
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* log font 大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal, italic,oblique */
}

/* The body pane */
QTextEdit#richTextEdit {
    background-color: #fdf5f5; /* A kind of pink. */
    selection-color: white;
    selection-background-color: red;
    /*font-family: DejaVu Sans Mono;*/
    /* font-family: Courier New; */
    font-family:YaHei Mono;
    /* 內文字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

QLabel {
    font-family:YaHei Mono;
    /* 下方的 Minibuffer 標題字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
}

/* Editor labels */
QLineEdit#editorLabel {
    background-color: #ffffec;
    font-family:YaHei Mono;
    /* 沒有直接對應字型大小 */
    font-size: 22px;
    font-weight: normal; /* normal,bold,100,..,900 */
    font-style: normal; /* normal,italic,oblique */
    border: 2px;
    margin: 2px;
}</t>
<t tx="leo.20190515144024.3">horizontal: body pane to the left
vertical: body pane on the botton</t>
<t tx="leo.20190515144224.1"># coding: utf-8

@others
if __name__ == "__main__":
    app.run()
@language python
@tabwidth -4
</t>
<t tx="leo.20190515144237.1">"""Flask Main program
"""

from flask import Flask, send_from_directory, request, redirect, \
    render_template, session, make_response, url_for, flash
# to install flask_cors use "python -m pip install flask_cors"
from flask_cors import CORS
import random
import math
import os
# 利用 nocache.py 建立 @nocache decorator, 讓頁面不會留下 cache
from nocache import nocache
import re
import math
import hashlib
# use quote_plus() to generate URL
import urllib.parse
# use cgi.escape() to resemble php htmlspecialchars()
# use cgi.escape() or html.escape to generate data for textarea tag, otherwise Editor can not deal with some Javascript code.
# for python 3.8 import html to replace cgi
from html import escape as html_escape
#import cgi
import os
import sys
# for new parse_content function
# 為了使用 bs4.element, 改為 import bs4
import bs4
# for ssavePage and savePage
import shutil
# for merge_sequence
from difflib import SequenceMatcher
import inspect
# 針對單一頁面有許多 html 標註時, 增大遞迴圈數設定
sys.setrecursionlimit(1000000)

# get the parent directory of the file
currentdir = os.path.dirname(os.path.abspath(inspect.getfile(inspect.currentframe())))
parentdir = os.path.dirname(currentdir)
sys.path.insert(0,parentdir) 
# 原先使用的 __file__ 所在目錄
#_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
_curdir = os.path.join(os.getcwd(), parentdir)
import init
# for start_static function
#import os
import subprocess
import threading
import http.server, ssl

try:
    # 新增 user.py 使用者自訂延伸程式功能, 先前版本若要升級至新版本, 必須新增 user.py 檔案
    import user
except:
    pass

# 產生亂數 token 需要 random 與 string 模組
import string

# 由 init.py 中的 uwsgi = False 或 True 決定在 uwsgi 模式或近端模式執行

# 確定程式檔案所在目錄
config_dir = _curdir + "/config/"
static_dir = _curdir + "/static/"
download_dir = _curdir + "/downloads/"
image_dir = _curdir + "/images/"

# 利用 init.py 啟動, 建立所需的相關檔案
initobj = init.Init()
# 取 init.py 中 Init 類別中的 class uwsgi 變數 (static variable) 設定
uwsgi = init.Init.uwsgi
ip = init.Init.ip
dynamic_port = init.Init.dynamic_port
static_port = init.Init.static_port

# 必須先將 download_dir 設為 static_folder, 然後才可以用於 download 方法中的 app.static_folder 的呼叫
app = Flask(__name__)
CORS(app, support_credentials=False)

# 設置隨後要在 blueprint 應用程式中引用的 global 變數
app.config['config_dir'] = config_dir
app.config['static_dir'] = static_dir
app.config['download_dir'] = download_dir

# 使用 session 必須要設定 secret_key
# In order to use sessions you have to set a secret key
# set the secret key.  keep this really secret:
#secret_key = os.urandom(24).hex()
#app.secret_key = secret_key
# check if fixed secret_key can allow multiple cmsimde on same session
app.secret_key = "eyJhZG1pbl8yczIwIjoxfQ.YOZamA.ft1Mus8eZ6m0QPXOBNLv0UBn6VQ"

try:
    # register userapp blueprint app in user.py
    app.register_blueprint(user.userapp)
except:
    pass


</t>
<t tx="leo.20190515144237.10">def downloadselect_access_list(files, starti, endi):

    """Accompanied with file_selector
    
    與 file_selector 搭配的取檔程式
    """

    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(download_dir + "/" + files[index])
        outstring += '''&lt;input type="checkbox" name="filename" value="''' + \
                          files[index] + '''"&gt;&lt;a href="#" onclick='window.setLink("/downloads/''' + \
                          files[index] + '''",0); return false;'&gt;''' + files[index] + \
                          '''&lt;/a&gt; (''' + str(sizeof_fmt(fileSize)) + ''')&lt;br /&gt;'''
    return outstring


</t>
<t tx="leo.20190515144237.11">@app.route('/edit_config', defaults={'edit': 1})
@app.route('/edit_config/&lt;path:edit&gt;')
def edit_config(edit):

    """Config edit html form
    """

    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not isAdmin():
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
                 Password:&lt;input type='password' name='password'&gt; \
                 &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
                 &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        site_title, password = parse_config()
        # edit config file
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Edit Config&lt;/h1&gt;&lt;form method='post' action='saveConfig'&gt; \
                 Site Title:&lt;input type='text' name='site_title' value='"+site_title+"' size='50'&gt;&lt;br /&gt; \
                 Password:&lt;input type='text' name='password' value='"+password+"' size='50'&gt;&lt;br /&gt; \
                 &lt;input type='hidden' name='password2' value='"+password+"'&gt; \
                 &lt;input type='submit' value='send'&gt;&lt;/form&gt; \
                 &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


# edit all page content
</t>
<t tx="leo.20190515144237.12">@app.route('/edit_page', defaults={'edit': 1})
@app.route('/edit_page/&lt;path:edit&gt;')
def edit_page(edit):

    """Page edit html form
    """

    # check if administrator
    if not isAdmin():
        return redirect('/login')
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        pagedata =file_get_contents(config_dir + "content.htm")
        #outstring = tinymce_editor(directory, cgi.escape(pagedata))
        # for python 3.8
        outstring = tinymce_editor(directory, html_escape(pagedata))
        return outstring


</t>
<t tx="leo.20190515144237.13">def editorfoot():
    
    """Add editor foot html
    """
    
    return '''&lt;body&gt;'''


</t>
<t tx="leo.20190515144237.14">def editorhead():
    
    """Add editor head html
    """
    return '''
    &lt;br /&gt;
&lt;!--&lt;script src="//cdn.tinymce.com/4/tinymce.min.js"&gt;&lt;/script&gt;--&gt;
&lt;!--&lt;script src="/static/tinymce4/tinymce/tinymce.min.js"&gt;&lt;/script&gt;--&gt;
&lt;!-- for ipv6 to work --&gt;
&lt;!-- &lt;script src="https://mde.tw/cmstemplate/cmsimde/static/tinymce4/tinymce/tinymce.min.js"&gt;&lt;/script&gt;--&gt;
&lt;!-- may work for local, ipv4 and ipv6 editing --&gt;
&lt;script src="/static/tinymce4/tinymce/tinymce.min.js"&gt;&lt;/script&gt;
&lt;script src="/static/tinymce4/tinymce/plugins/sh4tinymce/plugin.min.js"&gt;&lt;/script&gt;
&lt;link rel = "stylesheet" href = "/static/tinymce4/tinymce/plugins/sh4tinymce/style/style.css"&gt;
&lt;script&gt;
tinymce.init({
  selector: "textarea",
  height: 500,
  element_format : "html",
  language : "en",
  valid_elements : '*[*]',
  extended_valid_elements: "script[language|type|src]",
  plugins: [
    'advlist autolink lists link image charmap print preview hr anchor pagebreak',
    'searchreplace wordcount visualblocks visualchars code fullscreen',
    'insertdatetime media nonbreaking save table contextmenu directionality',
    'emoticons template paste textcolor colorpicker textpattern imagetools sh4tinymce'
  ],
  toolbar1: 'insertfile save undo redo | styleselect | bold italic | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent',
  toolbar2: 'link image | print preview media | forecolor backcolor emoticons | code sh4tinymce',
  relative_urls: false,
  toolbar_items_size: 'small',
  file_picker_callback: function(callback, value, meta) {
        cmsFilePicker(callback, value, meta);
    },
  templates: [
    { title: 'Test template 1', content: 'Test 1' },
    { title: 'Test template 2', content: 'Test 2' }
  ],
  content_css: [
    '//fonts.googleapis.com/css?family=Lato:300,300i,400,400i',
    '//www.tinymce.com/css/codepen.min.css'
  ]
});

function cmsFilePicker(callback, value, meta) {
    tinymce.activeEditor.windowManager.open({
        title: 'Uploaded File Browser',
        url: '/file_selector?type=' + meta.filetype,
        width: 800,
        height: 550,
    }, {
        oninsert: function (url, objVals) {
            callback(url, objVals);
        }
    });
};
&lt;/script&gt;
'''


</t>
<t tx="leo.20190515144237.15">@app.route('/error_log')
def error_log(self, info="Error"):
    
    """ Return error log
    """
    
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
             directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;ERROR&lt;/h1&gt;" + info + "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.16">def file_get_contents(filename):
    
    """Return filename content
    """
    
    # open file in utf-8 and return file content
    with open(filename, encoding="utf-8") as file:
        return file.read()


# 與 file_selector 配合, 用於 Tinymce4 編輯器的檔案選擇
</t>
<t tx="leo.20190515144237.17">def file_lister(directory, type=None, page=1, item_per_page=10):
    
    """Return file list
    """
    
    files = os.listdir(directory)
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = file_selector_script()
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type=" + type + \
                              "&amp;amp;page=1&amp;amp;item_per_page=" + \
                              str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type=" + type + \
                              "&amp;amp;page=" + str(page_num) + \
                              "&amp;amp;item_per_page=" +str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                                      str(page_now) + "&amp;amp;item_per_page=" + \
                                      str(item_per_page) + "&amp;amp;keyword=" + \
                                      str(session.get('download_keyword'))
                    outstring += "'&gt;" + str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                               str(nextpage) + "&amp;amp;item_per_page=" + \
                               str(item_per_page) + "&amp;amp;keyword=" + \
                               str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                               str(totalpage) + "&amp;amp;item_per_page=" + \
                               str(item_per_page) + "&amp;amp;keyword=" + \
                               str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            if type == "file":
                outstring += downloadselect_access_list(files, starti, endi) + "&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, endi) + "&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            if type == "file":
                outstring += downloadselect_access_list(files, starti, total_rows) + "&lt;br /&gt;"
            else:
                outstring += imageselect_access_list(files, starti, total_rows) + "&lt;br /&gt;"
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "file_selector?type=" + type + \
                              "&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                               str(page_num) + "&amp;amp;item_per_page=" + \
                               str(item_per_page) + "&amp;amp;keyword=" + \
                               str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt;"
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                                       str(page_now) + "&amp;amp;item_per_page=" + \
                                       str(item_per_page) + "&amp;amp;keyword=" + \
                                       str(session.get('download_keyword'))
                    outstring += "'&gt;" + str(page_now) + "&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                               str(nextpage) + "&amp;amp;item_per_page=" + \
                               str(item_per_page) + "&amp;amp;keyword=" + \
                               str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "file_selector?type=" + type + "&amp;amp;page=" + \
                               str(totalpage) + "&amp;amp;item_per_page=" + \
                               str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"

    if type == "file":
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='fileuploadform'&gt;file upload&lt;/a&gt;"
    else:
        return outstring+"&lt;br /&gt;&lt;br /&gt;&lt;a href='imageuploadform'&gt;image upload&lt;/a&gt;"


# 配合 Tinymce4 讓使用者透過 html editor 引用所上傳的 files 與 images
</t>
<t tx="leo.20190515144237.18">@app.route('/file_selector', methods=['GET'])
def file_selector():
    
    """Return file selected
    """
    
    if not isAdmin():
        return redirect("/login")
    else:
        if not request.args.get('type'):
            type= "file"
        else:
            type = request.args.get('type')
        if not request.args.get('page'):
            page = 1
        else:
            page = request.args.get('page')
        if not request.args.get('item_per_page'):
            item_per_page = 10
        else:
            item_per_page = request.args.get('item_per_page')
        if not request.args.get('keyword'):
            keyword = None
        else:
            keyword = request.args.get('keyword')

        if type == "file":

            return file_lister(download_dir, type, page, item_per_page)
        elif type == "image":
            return file_lister(image_dir, type, page, item_per_page)


</t>
<t tx="leo.20190515144237.19">def file_selector_script():
    
    """Return file selector Javascript
    """
    
    return '''
&lt;script language="javascript" type="text/javascript"&gt;
$(function(){
    $('.a').on('click', function(event){
        setLink();
    });
});

function setLink (url, objVals) {
    top.tinymce.activeEditor.windowManager.getParams().oninsert(url, objVals);
    top.tinymce.activeEditor.windowManager.close();
    return false;
}
&lt;/script&gt;
'''


</t>
<t tx="leo.20190515144237.2">@app.route('/checkLogin', methods=['POST'])
def checkLogin():

    """Check user login process
    """

    password = request.form["password"]
    site_title, saved_password = parse_config()
    hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
    if hashed_password == saved_password:
        # 為了讓多 cmsimde 可以在同一個瀏覽器共存, 因此讓每一個 session 不同
        session['admin_'+token] = 1
        # 看起來送至 client 端的不是 admin_token, 而是編碼過的 secret_key
        return redirect('/edit_page')
    return redirect('/')

 
</t>
<t tx="leo.20190515144237.20">@app.route('/fileaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def fileaxupload():
    
    """Write uploaded file to server
    """
    
    if isAdmin():
        # need to consider if the uploaded filename already existed.
        # right now all existed files will be replaced with the new files
        filename = request.args.get("ax-file-name")
        flag = request.args.get("start")
        if flag == "0":
            file = open(_curdir + "/downloads/" + filename, "wb")
        else:
            file = open(_curdir + "/downloads/" + filename, "ab")
        file.write(request.stream.read())
        file.close()
        return "files uploaded!"
    else:
        return redirect("/login")


</t>
<t tx="leo.20190515144237.21">@app.route('/fileuploadform', defaults={'edit':1})
@app.route('/fileuploadform/&lt;path:edit&gt;')
def fileuploadform(edit):
    
    """Return file upload form html
    """
    
    if isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;file upload&lt;/h1&gt;" + \
                 '''&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script&gt;
$(document).ready(function(){
$('.prova').axuploader({url:'fileaxupload', allowExt:['jpg','png','gif','7z','pdf','zip','flv','stl','swf'],
finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
enable:true,
remotePath:function(){
return 'downloads/';
}
});
});
&lt;/script&gt;
&lt;div class="prova"&gt;&lt;/div&gt;
&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
'''
    else:
        return redirect("/login")


</t>
<t tx="leo.20190515144237.22">@app.route('/flvplayer')
# 需要檢視能否取得 filepath 變數
def flvplayer(filepath=None):
    
    """Return old flv file viewer
    """
    
    outstring = '''
&lt;object type="application/x-shockwave-flash" data="''' + static_dir + '''player_flv_multi.swf" width="320" height="240"&gt;
     &lt;param name="movie" value="player_flv_multi.swf" /&gt;
     &lt;param name="allowFullScreen" value="true" /&gt;
     &lt;param name="FlashVars" value="flv=''' + filepath + '''&amp;amp;width=320&amp;amp;height=240&amp;amp;showstop=1&amp;amp;showvolume=1&amp;amp;showtime=1
     &amp;amp;startimage=''' + static_dir + '''startimage_en.jpg&amp;amp;showfullscreen=1&amp;amp;bgcolor1=189ca8&amp;amp;bgcolor2=085c68
     &amp;amp;playercolor=085c68" /&gt;
&lt;/object&gt;
'''
    return outstring


</t>
<t tx="leo.20190515144237.23">@app.route('/generate_pages')
def generate_pages():

    """Convert content.htm to static html files in  content directory
    """

    # 必須決定如何處理重複標題頁面的轉檔
    # 確定程式檔案所在目錄, 在 Windows 有最後的反斜線
    #_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
    # 根據 content.htm 內容, 逐一產生各頁面檔案
    # 在此也要同時配合 render_menu2, 產生對應的 anchor 連結
    # check if administrator
    if not isAdmin():
        return redirect('/login')
    else:
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        # 處理重複標題 head 數列， 重複標題則按照次序加上 1, 2, 3...
        newhead = []
        for i, v in enumerate(head):
            # 各重複標題總數
            totalcount = head.count(v)
            # 目前重複標題出現總數
            count = head[:i].count(v)
            # 針對重複標題者, 附加目前重複標題出現數 +1, 未重複採原標題
            newhead.append(v + "-" + str(count + 1) if totalcount &gt; 1 else v)
        # 刪除 content 目錄中所有 html 檔案
        filelist = [ f for f in os.listdir(_curdir + "/content/") if f.endswith(".html") ]
        for f in filelist:
            os.remove(os.path.join(_curdir + "/content/", f))
        # 這裡需要建立專門寫出 html 的 write_page
        # index.html
        with open(_curdir + "/content/index.html", "w", encoding="utf-8") as f:
            f.write(get_page2(None, newhead, 0))
        # sitemap
        with open(_curdir + "/content/sitemap.html", "w", encoding="utf-8") as f:
            # 為了修改為動態與靜態網頁雙向轉檔, 這裡需要 newhead pickle
            # sitemap2 需要 newhead
            f.write(sitemap2(newhead))
        # 以下轉檔, 改用 newhead 數列

        def visible(element):
            if element.parent.name in ['style', 'script', '[document]', 'head', 'title']:
                return False
            elif re.match('&lt;!--.*--&gt;', str(element.encode('utf-8'))):
                return False
            return True

        search_content = []
        # generate each page html under content directory
        for i in range(len(newhead)):
            # 在此必須要將頁面中的 /images/ 字串換為 images/, /downloads/ 換為 downloads/
            # 因為 Flask 中靠 /images/ 取檔案, 但是一般 html 則採相對目錄取檔案
            # 此一字串置換在 get_page2 中進行
            # 加入 tipue search 模式
            get_page_content = []
            html_doc = get_page2(newhead[i], newhead, 0, get_page_content)
            """
            # html = "&lt;meta property='head' content='H1'&gt;"
            soup = BeautifulSoup(html)
            title = soup.find("meta", property="head")
            print(title["content"])
            """
            html_doc = html_doc.replace('&lt;meta charset="utf-8"&gt;', '&lt;meta charset="utf-8"&gt;\n&lt;meta property="head" content="H'+str(level[i])+'"&gt;')
            soup = bs4.BeautifulSoup(" ".join(get_page_content), "lxml")
            search_content.append({"title": newhead[i], "text": " ".join(filter(visible, soup.findAll(text=True))), "tags": "", "url": newhead[i] + ".html"})
            with open(_curdir + "/content/" + newhead[i] + ".html", "w", encoding="utf-8") as f:
                # 增加以 newhead 作為輸入
                f.write(html_doc)
        # GENERATE js file
        with open(_curdir + "/content/tipuesearch_content.js", "w", encoding="utf-8") as f:
            f.write("var tipuesearch = {\"pages\": " + str(search_content) + "};")
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                     directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Generate Pages&lt;/h1&gt;" + \
                     "已經將網站轉為靜態網頁!" + \
                     "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"</t>
<t tx="leo.20190515144237.24"># seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
@app.route('/get_page')
@app.route('/get_page/&lt;heading&gt;', defaults={'edit': 0})
@app.route('/get_page/&lt;heading&gt;/&lt;int:edit&gt;')
def get_page(heading, edit):
    
    """Get dynamic page content
    """
    
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if heading is None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1] + " &lt;&lt; &lt;a href='/get_page/" + \
                             head[page_order-1] + "'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='/get_page/"+ head[page_order+1] + \
                              "'&gt;Next&lt;/a&gt; &gt;&gt; " + head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page + " " + next_page + \
                                      "&lt;br /&gt;&lt;h1&gt;" + heading + "&lt;/h1&gt;" + \
                                      page_content_list[i] + "&lt;br /&gt;"+ \
                                      last_page + " " + next_page + "&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order] + "&gt;" + heading + \
                                          "&lt;/h"+level[page_order] + "&gt;" + page_content_list[i]
            outstring_list.append(last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, html_escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" +\
                                      heading + "&lt;/h1&gt;" + page_content_list[i] + "&lt;br /&gt;" + last_page + " " + next_page
            
        pagedata += "&lt;h"+level[page_order] + "&gt;" + heading + "&lt;/h" + level[page_order] + "&gt;" + page_content_list[i]
        # 利用 html_escape() 將 specialchar 轉成只能顯示的格式
        outstring += last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, html_escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;" + return_content + "&lt;/section&gt;&lt;/div&gt;" + checkMath() + "&lt;/body&gt;&lt;/html&gt;"
    # enter edit mode
    else:
        # check if administrator
        if not isAdmin():
            redirect(url_for('login'))
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編輯, 則導向 edit_page
                #return redirect("/edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i] + "&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h"+level[page_order]+"&gt;"+heading+"&lt;/h"+level[page_order]+"&gt;"+search_content(head, page, heading)
            #outstring = last_page+" "+next_page+"&lt;br /&gt;"+ tinymce_editor(directory, html_escape(pagedata), page_order)
                return outstring


# seperate page need heading and edit variables, if edit=1, system will enter edit mode
# single page edit will use ssavePage to save content, it means seperate save page
'''
@app.route('/get_page2')
@app.route('/get_page2/&lt;heading&gt;', defaults={'edit': 0})
@app.route('/get_page2/&lt;heading&gt;/&lt;int:edit&gt;')
'''
# before add tipue search function
#def get_page2(heading, head, edit):
</t>
<t tx="leo.20190515144237.26">@app.route('/image_delete_file', methods=['POST'])
def image_delete_file():
    
    """Delete image file
    """
    
    if not isAdmin():
        return redirect("/login")
    filename = request.form['filename']
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if filename is None:
        outstring = "no file selected!"
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;" + \
                 outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='image_doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename + "&lt;input type='hidden' name='filename' value='" + \
                          filename + "'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index] + "&lt;input type='hidden' name='filename' value='" + \
                              filename[index] + "'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
             directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;" + \
             outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.27">@app.route('/image_doDelete', methods=['POST'])
def image_doDelete():
    
    """Delete file action
    """
    
    if not isAdmin():
        return redirect("/login")
    # delete files
    filename = request.form['filename']
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(image_dir + "/" + filename)
            outstring += filename + " deleted!"
        except:
            outstring += filename + "Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(image_dir + "/" + filename[index])
                outstring += filename[index] + " deleted!&lt;br /&gt;"
            except:
                outstring += filename[index] + "Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
             directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;" + \
             outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.28">@app.route('/image_list', methods=['GET'])
def image_list():
    
    """List image files
    """
    
    if not isAdmin():
        return redirect("/login")
    else:
        if not request.args.get('edit'):
            edit= 1
        else:
            edit = request.args.get('edit')
        if not request.args.get('page'):
            page = 1
        else:
            page = request.args.get('page')
        if not request.args.get('item_per_page'):
            item_per_page = 10
        else:
            item_per_page = request.args.get('item_per_page')
        
        # only use lower case keyword to search filename
        session.pop('image_keyword', "")
        
        if not request.args.get('keyword'):
            keyword = ""
        else:
            keyword = request.args.get('keyword')
        
        session['image_keyword'] = keyword
        
        # turn all english char of the filenames into lower cases
        origFiles = os.listdir(image_dir)
        files = []
        #lowerCaseFiles = []
        for i in range(len(origFiles)):
            filename = origFiles[i]
            lowerFilename = ""
            for j in range(len(filename)):
                uchar = filename[j]
                if uchar &gt;= u'\u4e00' and uchar&lt;=u'\u9fa5':
                    lowerFilename += uchar
                else:
                    lowerFilename += uchar.lower()
            # check if lowerFilename contains keyword
            if str(keyword) in lowerFilename:
                files.append(filename) 
        
    files.sort()
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='image_delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page=" + \
                              str(item_per_page) + "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(page_num) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index &gt;= 0 and index &lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page=" + str(page_now) + \
                                      "&amp;amp;item_per_page=" + str(item_per_page) + \
                                      "&amp;amp;keyword=" + str(session.get('image_keyword'))
                    outstring += "'&gt;" + str(page_now) + "&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(nextpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(totalpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += imagelist_access_list(files, starti, endi) + "&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += imagelist_access_list(files, starti, total_rows) + "&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=1&amp;amp;item_per_page=" + \
                              str(item_per_page) + "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(page_num) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "image_list?&amp;amp;page=" + str(page_now) + \
                                      "&amp;amp;item_per_page=" + str(item_per_page) + \
                                      "&amp;amp;keyword=" + str(session.get('image_keyword'))
                    outstring += "'&gt;"+str(page_now) + "&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(nextpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "image_list?&amp;amp;page=" + str(totalpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('image_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
             directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Image List&lt;/h1&gt;" + \
             outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.29">@app.route('/imageaxupload', methods=['POST'])
# ajax jquery chunked file upload for flask
def imageaxupload():
    
    """Write uploaded image files
    """
    
    if isAdmin():
        # need to consider if the uploaded filename already existed.
        # right now all existed files will be replaced with the new files
        filename = request.args.get("ax-file-name")
        flag = request.args.get("start")
        if flag == "0":
            file = open(_curdir + "/images/" + filename, "wb")
        else:
            file = open(_curdir + "/images/" + filename, "ab")
        file.write(request.stream.read())
        file.close()
        return "image files uploaded!"
    else:
        return redirect("/login")


</t>
<t tx="leo.20190515144237.3">@app.route('/delete_file', methods=['POST'])
def delete_file():

    """Delete user uploaded files
    """

    if not isAdmin():
        return redirect("/login")
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    # for multiple files selection
    filename = request.form.getlist('filename')
    if filename is None:
        outstring = "no file selected!"
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                   directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Delete Error&lt;/h1&gt;" + \
                   outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"
    outstring = "delete all these files?&lt;br /&gt;&lt;br /&gt;"
    outstring += "&lt;form method='post' action='doDelete'&gt;"
    # only one file is selected
    if isinstance(filename, str):
        outstring += filename + "&lt;input type='hidden' name='filename' value='" + \
                            filename + "'&gt;&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            outstring += filename[index] + "&lt;input type='hidden' name='filename' value='" + \
                                filename[index]+"'&gt;&lt;br /&gt;"
    outstring += "&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;/form&gt;"

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
               directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;" + \
               outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.30">def imagelist_access_list(files, starti, endi):
    
    """Access files of image direcroty
    """
    
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(image_dir + "/" + files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="' + files[index] + \
                              '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/' + \
                              files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + \
                              files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
    return outstring


# 與 file_selector 搭配的取影像檔程式
</t>
<t tx="leo.20190515144237.31">def imageselect_access_list(files, starti, endi):
    
    """Access selected image file
    """
    
    outstring = '''&lt;head&gt;
&lt;style&gt;
a.xhfbfile {padding: 0 2px 0 0; line-height: 1em;}
a.xhfbfile img{border: none; margin: 6px;}
a.xhfbfile span{display: none;}
a.xhfbfile:hover span{
    display: block;
    position: relative;
    left: 150px;
    border: #aaa 1px solid;
    padding: 2px;
    background-color: #ddd;
}
a.xhfbfile:hover{
    background-color: #ccc;
    opacity: .9;
    cursor:pointer;
}
&lt;/style&gt;
&lt;/head&gt;
'''
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileSize = os.path.getsize(image_dir+"/"+files[index])
        outstring += '''&lt;a class="xhfbfile" href="#" onclick='window.setLink("/images/'''+ \
                          files[index] + '''",0); return false;'&gt;''' + \
                          files[index] + '''&lt;span style="position: absolute; z-index: 4;"&gt;&lt;br /&gt; \
                          &lt;img src="/images/''' + files[index] + '''" width="150px"/&gt;&lt;/span&gt;&lt;/a&gt; \
                          (''' + str(sizeof_fmt(fileSize)) + ''')&lt;br /&gt;'''
    return outstring


</t>
<t tx="leo.20190515144237.32">@app.route('/imageuploadform', defaults={'edit': 1})
@app.route('/imageuploadform/&lt;path:edit&gt;')
def imageuploadform(edit):
    
    """Image files upload form
    """
    
    if isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;image files upload&lt;/h1&gt;" + '''
&lt;script src="/static/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script src="/static/axuploader.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;script&gt;
$(document).ready(function(){
$('.prova').axuploader({url:'imageaxupload', allowExt:['jpg','png','gif'],
finish:function(x,files)
    {
        alert('All files have been uploaded: '+files);
    },
enable:true,
remotePath:function(){
return 'images/';
}
});
});
&lt;/script&gt;
&lt;div class="prova"&gt;&lt;/div&gt;
&lt;input type="button" onclick="$('.prova').axuploader('disable')" value="asd" /&gt;
&lt;input type="button" onclick="$('.prova').axuploader('enable')" value="ok" /&gt;
&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;
'''
    else:
        return redirect("/login")


</t>
<t tx="leo.20190515144237.33">@app.route('/')
def index():
    
    """Index page of dynamic site
    """
    
    head, level, page = parse_content()
    # 2018.12.13, 將空白轉為"+" 號, 會導致連線錯誤, 改為直接取頁面標題
    #return redirect("/get_page/" + urllib.parse.quote_plus(head[0], encoding="utf-8"))
    return redirect("/get_page/" + head[0])
    # the following will never execute
    directory = render_menu(head, level, page)
    if heading is None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    return_content = ""
    for i in range(len(page_order_list)):
        #page_order = head.index(heading)
        page_order = page_order_list[page_order_list[i]]
        if page_order == 0:
            last_page = ""
        else:
            last_page = head[page_order-1] + " &lt;&lt; &lt;a href='/get_page/" + \
                             head[page_order-1] + "'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            next_page = "&lt;a href='/get_page/" + head[page_order+1] + \
                              "'&gt;Next&lt;/a&gt; &gt;&gt; " + head[page_order+1]
        return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" + \
                                  heading + "&lt;/h1&gt;" + page_content_list[page_order_list[i]] + \
                                  "&lt;br /&gt;" + last_page + " " + next_page

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
             directory + "&lt;/nav&gt;&lt;section&gt;" + return_content + "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.34">def isAdmin():
    
    """Check if is adminitrator
    """
    
    if session.get('admin_'+token) == 1:
            return True
    else:
        return False


# use to check directory variable data
</t>
<t tx="leo.20190515144237.35">@app.route('/listdir')
def listdir():
    
    """List directory content
    """
    
    return download_dir + "," + config_dir


</t>
<t tx="leo.20190515144237.36">@app.route('/load_list')
def load_list(item_per_page=5, page=1, filedir=None, keyword=None):
    
    """Load searched files
    """
    
    files = os.listdir(config_dir+filedir+"_programs/")
    if keyword is None:
        pass
    else:
        session['search_keyword'] = keyword
        files = [s for s in files if keyword in s]
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = '''&lt;script&gt;
function keywordSearch(){
    var oform = document.forms["searchform"];
    // 取elements集合中 name 屬性為 keyword 的值
    var getKeyword = oform.elements.keyword.value;
    // 改為若表單為空, 則列出全部資料
    //if(getKeyword != ""){
        window.location = "?brython&amp;keyword="+getKeyword;
    //}
}
&lt;/script&gt;
    &lt;form name="searchform"&gt;
    &lt;input type="text" id="keyword" /&gt;
    &lt;input type="button" id="send" value="查詢" onClick="keywordSearch()"/&gt; 
    &lt;/form&gt;
'''
    outstring += "&lt;form name='filelist' method='post' action=''&gt;"
    notlast = False
    if total_rows &gt; 0:
        # turn off the page selector on top
        '''
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page=1&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "brython?&amp;amp;page="+str(page_num)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 10
        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;"+str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "brython?&amp;amp;page="+str(page_now)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(session.get('search_keyword'))
                    outstring += "'&gt;"+str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(nextpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "brython?&amp;amp;page="+str(totalpage)+"&amp;amp;item_per_page="+str(item_per_page)+"&amp;amp;keyword="+str(session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"
        '''
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += loadlist_access_list(files, starti, endi, filedir) + "&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += loadlist_access_list(files, starti, total_rows, filedir) + "&lt;br /&gt;"
        
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "/"+filedir + "?&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page)+"&amp;amp;keyword=" + str(session.get('search_keyword'))
            outstring += "'&gt;{{&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "/"+filedir + "?&amp;amp;page=" + str(page_num)+"&amp;amp;item_per_page=" + \
                              str(item_per_page) + "&amp;amp;keyword=" + str(session.get('search_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "
        span = 5
        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "/" + filedir + "?&amp;amp;page=" + str(page_now) + \
                                      "&amp;amp;item_per_page=" + str(item_per_page) + \
                                      "&amp;amp;keyword="+str(session.get('search_keyword'))
                    outstring += "'&gt;" + str(page_now) + "&lt;/a&gt; "
        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "/" + filedir + "?&amp;amp;page=" + str(nextpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('search_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "/" + filedir + "?&amp;amp;page=" + str(totalpage) + \
                              "&amp;amp;item_per_page=" + str(item_per_page) + \
                              "&amp;amp;keyword=" + str(session.get('search_keyword'))
            outstring += "'&gt;}}&lt;/a&gt;"
    else:
        outstring += "no data!"
    #outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='load'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;/form&gt;"

    return outstring


</t>
<t tx="leo.20190515144237.4">@app.route('/doDelete', methods=['POST'])
def doDelete():

    """Action to delete user uploaded files
    """
    
    if not isAdmin():
        return redirect("/login")
    # delete files
    # allow multiple files selection
    filename = request.form.getlist('filename')
    outstring = "all these files will be deleted:&lt;br /&gt;&lt;br /&gt;"
    # only select one file
    if isinstance(filename, str):
        try:
            os.remove(download_dir + "/" + filename)
            outstring += filename + " deleted!"
        except:
            outstring += filename + "Error, can not delete files!&lt;br /&gt;"
    else:
        # multiple files selected
        for index in range(len(filename)):
            try:
                os.remove(download_dir + "/" + filename[index])
                outstring += filename[index] + " deleted!&lt;br /&gt;"
            except:
                outstring += filename[index] + "Error, can not delete files!&lt;br /&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
               directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;" + \
               outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.5">@app.route('/doSearch', methods=['POST'])
def doSearch():
    
    """Action to search content.htm using keyword
    """
    
    if not isAdmin():
        return redirect("/login")
    else:
        keyword = request.form['keyword']
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        match = ""
        for index in range(len(head)):
            if (keyword != "" or None) and (keyword.lower() in page[index].lower() or \
            keyword.lower() in head[index].lower()): \
                match += "&lt;a href='/get_page/" + head[index] + "'&gt;" + \
                                head[index] + "&lt;/a&gt;&lt;br /&gt;"
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
                   directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search Result&lt;/h1&gt;keyword: " + \
                   keyword.lower() + "&lt;br /&gt;&lt;br /&gt;in the following pages:&lt;br /&gt;&lt;br /&gt;" + \
                   match + "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.6">@app.route('/download/', methods=['GET'])
def download():

    """Download file using URL
    """

    filename = request.args.get('filename')
    type = request.args.get('type')
    if type == "files":
        return send_from_directory(download_dir, filename=filename)
    else:
    # for image files
        return send_from_directory(image_dir, filename=filename)
    

</t>
<t tx="leo.20190515144237.7">@app.route('/download_list', methods=['GET'])
def download_list():

    """List files in downloads directory
    """

    if not isAdmin():
        return redirect("/login")
    else:
        if not request.args.get('edit'):
            edit= 1
        else:
            edit = request.args.get('edit')
        if not request.args.get('page'):
            page = 1
        else:
            page = request.args.get('page')
        if not request.args.get('item_per_page'):
            item_per_page = 10
        else:
            item_per_page = request.args.get('item_per_page')
        
        # only use lower case keyword to search filename
        session.pop('download_keyword', "")
        
        if not request.args.get('keyword'):
            keyword = ""
        else:
            keyword = request.args.get('keyword')
        
        session['download_keyword'] = keyword
        # turn all english char of the filenames into lower cases
        origFiles = os.listdir(download_dir)
        files = []
        #lowerCaseFiles = []
        for i in range(len(origFiles)):
            filename = origFiles[i]
            lowerFilename = ""
            for j in range(len(filename)):
                uchar = filename[j]
                if uchar &gt;= u'\u4e00' and uchar&lt;=u'\u9fa5':
                    lowerFilename += uchar
                else:
                    lowerFilename += uchar.lower()
            # check if lowerFilename contains keyword
            if str(keyword) in lowerFilename:
                files.append(filename)    
    files.sort()
    total_rows = len(files)
    totalpage = math.ceil(total_rows/int(item_per_page))
    starti = int(item_per_page) * (int(page) - 1) + 1
    endi = starti + int(item_per_page) - 1
    outstring = "&lt;form method='post' action='delete_file'&gt;"
    notlast = False
    if total_rows &gt; 0:
        outstring += "&lt;br /&gt;"
        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page) + \
                                "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(page_num) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "

        span = 10

        for index in range(int(page)-span, int(page)+span):
            if index&gt;= 0 and index&lt; totalpage:
                page_now = index + 1 
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page) + " &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page=" + str(page_now) + "&amp;amp;item_per_page=" + \
                                        str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
                    outstring += "'&gt;"+str(page_now) + "&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(nextpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(totalpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;"

        if (int(page) * int(item_per_page)) &lt; total_rows:
            notlast = True
            outstring += downloadlist_access_list(files, starti, endi) + "&lt;br /&gt;"
        else:
            outstring += "&lt;br /&gt;&lt;br /&gt;"
            outstring += downloadlist_access_list(files, starti, total_rows) + "&lt;br /&gt;"

        if int(page) &gt; 1:
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=1&amp;amp;item_per_page=" + str(item_per_page) + \
                                "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&lt;&lt;&lt;/a&gt; "
            page_num = int(page) - 1
            outstring += "&lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(page_num) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Previous&lt;/a&gt; "

        span = 10

        for index in range(int(page)-span, int(page)+span):
        #for ($j=$page-$range;$j&lt;$page+$range;$j++)
            if index &gt;=0 and index &lt; totalpage:
                page_now = index + 1
                if page_now == int(page):
                    outstring += "&lt;font size='+1' color='red'&gt;" + str(page)+" &lt;/font&gt;"
                else:
                    outstring += "&lt;a href='"
                    outstring += "download_list?&amp;amp;page=" + str(page_now) + \
                                        "&amp;amp;item_per_page=" + str(item_per_page) + \
                                        "&amp;amp;keyword=" + str(session.get('download_keyword'))
                    outstring += "'&gt;" + str(page_now)+"&lt;/a&gt; "

        if notlast == True:
            nextpage = int(page) + 1
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(nextpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;Next&lt;/a&gt;"
            outstring += " &lt;a href='"
            outstring += "download_list?&amp;amp;page=" + str(totalpage) + "&amp;amp;item_per_page=" + \
                                str(item_per_page) + "&amp;amp;keyword=" + str(session.get('download_keyword'))
            outstring += "'&gt;&gt;&gt;&lt;/a&gt;"
    else:
        outstring += "no data!"
    outstring += "&lt;br /&gt;&lt;br /&gt;&lt;input type='submit' value='delete'&gt;&lt;input type='reset' value='reset'&gt;&lt;/form&gt;"

    head, level, page = parse_content()
    directory = render_menu(head, level, page)

    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
               directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Download List&lt;/h1&gt;" + outstring + "&lt;br/&gt;&lt;br /&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144237.8">def downloadlist_access_list(files, starti, endi):
    
    """List files function for download_list
    """
    
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(download_dir+"/"+files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/images/' +  \
                              files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + \
                              files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=' + '/downloads/' + \
                              files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + \
                              files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="' + \
                              files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/' + \
            files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='" + files[index] + \
                              "'&gt;&lt;a href='./../downloads/" + files[index] + "'&gt;" + files[index] + \
                              "&lt;/a&gt; (" + str(fileSize) + ")&lt;br /&gt;"
    return outstring


# downloads 方法主要將位於 downloads 目錄下的檔案送回瀏覽器
</t>
<t tx="leo.20190515144237.9">@app.route('/downloads/&lt;path:path&gt;')
def downloads(path):

    """Send files in downloads directory
    """

    return send_from_directory(_curdir+"/downloads/", path)

</t>
<t tx="leo.20190515144238.1">def loadlist_access_list(files, starti, endi, filedir):
    
    """Access loaded file list
    """
    
    # different extension files, associated links were provided
    # popup window to view images, video or STL files, other files can be downloaded directly
    # files are all the data to list, from starti to endi
    # add file size
    outstring = ""
    for index in range(int(starti)-1, int(endi)):
        fileName, fileExtension = os.path.splitext(files[index])
        fileExtension = fileExtension.lower()
        fileSize = sizeof_fmt(os.path.getsize(config_dir + filedir + "_programs/" + files[index]))
        # images files
        if fileExtension == ".png" or fileExtension == ".jpg" or fileExtension == ".gif":
            outstring += '&lt;input type="checkbox" name="filename" value="' + files[index] + \
                              '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/downloads/'+ \
                            files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + files[index] + '&lt;/a&gt; (' + str(fileSize) + ')&lt;br /&gt;'
        # stl files
        elif fileExtension == ".stl":
            outstring += '&lt;input type="checkbox" name="filename" value="' + files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/static/viewstl.html?src=/static/' +  \
            files[index] + '\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + files[index] + '&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # flv files
        elif fileExtension == ".flv":
            outstring += '&lt;input type="checkbox" name="filename" value="' + files[index] + '"&gt;&lt;a href="javascript:;" onClick="window.open(\'/flvplayer?filepath=/downloads/' +  \
            files[index]+'\',\'images\', \'catalogmode\',\'scrollbars\')"&gt;' + files[index] + '&lt;/a&gt; ('+str(fileSize)+')&lt;br /&gt;'
        # py files
        elif fileExtension == ".py":
            outstring += '&lt;input type="radio" name="filename" value="' + files[index] + '"&gt;' + files[index] + ' (' + str(fileSize) + ')&lt;br /&gt;'
        # direct download files
        else:
            outstring += "&lt;input type='checkbox' name='filename' value='" + files[index] + \
                             "'&gt;&lt;a href='/" + filedir + "_programs/" + files[index] + "'&gt;" + files[index] + "&lt;/a&gt; (" + str(fileSize) + ")&lt;br /&gt;"
    return outstring


</t>
<t tx="leo.20190515144238.10">@app.route('/saveConfig', methods=['POST'])
def saveConfig():
    
    """Save Config setup file
    """
    
    if not isAdmin():
        return redirect("/login")
    site_title = request.form['site_title']
    password = request.form['password']
    password2 = request.form['password2']
    if site_title is None or password is None:
        return error_log("no content to save!")
    old_site_title, old_password = parse_config()
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if site_title is None or password is None or password2 != old_password or password == '':
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Error!&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        if password == password2 and password == old_password:
            hashed_password = old_password
        else:
            hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        # save password to config/config, sitetitle to config/sitetitle
        # save sitetitle
        file = open(config_dir + "sitetitle", "w", encoding="utf-8")
        file.write(site_title)
        file.close()
        # save password
        file = open(config_dir + "config", "w", encoding="utf-8")
        file.write(hashed_password)
        file.close()
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;config file saved&lt;/h1&gt;&lt;a href='/'&gt;Home&lt;/a&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144238.11">@app.route('/savePage', methods=['POST'])
def savePage():
    
    """Save all pages function
    """
    
    page_content = request.form['page_content']
    # when element_format : "html", need to remove the annoying comment to prevent brython exec
    page_content = page_content.replace('// &lt;![CDATA[', '')
    page_content = page_content.replace('// ]]&gt;', '')
    # check if administrator
    if not isAdmin():
        return redirect("/login")
    if page_content is None:
        return error_log("no content to save!")
    # 在插入新頁面資料前, 先複製 content.htm 一分到 content_backup.htm
    shutil.copy2(config_dir + "content.htm", config_dir + "content_backup.htm")
    # in Windows client operator, to avoid textarea add extra \n
    # for ajax save comment the next line
    #page_content = page_content.replace("\n","")
    with open(config_dir + "content.htm", "w", encoding="utf-8") as f:
        f.write(page_content)
    return redirect("/edit_page")


# use head title to search page content
'''
# search_content(head, page, search)
# 從 head 與 page 數列中, 以 search 關鍵字進行查詢
# 原先傳回與 search 關鍵字頁面對應的頁面內容
# 現在則傳回多重的頁面次序與頁面內容數列
find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
head = ["標題一","標題二","標題三","標題一","標題四","標題五"]
search_result = find(head,["標題一"])[0]
page_order = []
page_content = []
for i in range(len(search_result)):
    # 印出次序
    page_order.append(search_result[i])
    # 標題為 head[search_result[i]]
    #  頁面內容則為 page[search_result[i]]
    page_content.append(page[search_result[i]])
    # 從 page[次序] 印出頁面內容
# 準備傳回 page_order 與 page_content 等兩個數列
'''


</t>
<t tx="leo.20190515144238.12">def search_content(head, page, search):
    
    """Search content
    """

    find = lambda searchList, elem: [[i for i, x in enumerate(searchList) if x == e] for e in elem]
    search_result = find(head, [search])[0]
    page_order = []
    page_content = []
    for i in range(len(search_result)):
        # 印出次序
        page_order.append(search_result[i])
        # 標題為 head[search_result[i]]
        #  頁面內容則為 page[search_result[i]]
        page_content.append(page[search_result[i]])
        # 從 page[次序] 印出頁面內容
    # 準備傳回 page_order 與 page_content 等兩個數列
    return page_order, page_content


</t>
<t tx="leo.20190515144238.13">@app.route('/search_form', defaults={'edit': 1})
@app.route('/search_form/&lt;path:edit&gt;')
def search_form(edit):
    
    """Form of keyword search
    """
    
    if isAdmin():
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Search&lt;/h1&gt; \
                 &lt;form method='post' action='doSearch'&gt; \
                 keywords:&lt;input type='text' name='keyword'&gt; \
                 &lt;input type='submit' value='search'&gt;&lt;/form&gt; \
                 &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        return redirect("/login")


# setup static directory
</t>
<t tx="leo.20190515144238.14">@app.route('/static/&lt;path:path&gt;')
def send_file(path):
    
    """Send file function
    """
    return app.send_static_file(static_dir + path)


# setup static directory
#@app.route('/images/&lt;path:path&gt;')
</t>
<t tx="leo.20190515144238.15">@app.route('/images/&lt;path:path&gt;')
def send_images(path):
    
    """Send image files
    """
    
    return send_from_directory(_curdir + "/images/", path)


# setup static directory
</t>
<t tx="leo.20190515144238.16">@app.route('/static/')
def send_static():
    
    """Send static files
    """
    
    return app.send_static_file('index.html')


# set_admin_css for administrator
</t>
<t tx="leo.20190515144238.17">def set_admin_css():
    
    """Set css for admin
    """
    
    outstring = '''&lt;!doctype html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;''' + init.Init.site_title + '''&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
''' + syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    # SSL for uwsgi operation
    if uwsgi:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;''' + site_title + '''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/sitemap"&gt;SiteMap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="''' + str(correct_url()) + '''/1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/imageuploadform"&gt;Image Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/image_list"&gt;Image List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/fileuploadform"&gt;File Upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/download_list"&gt;File List&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/logout"&gt;Logout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/generate_pages"&gt;generate_pages&lt;/a&gt;&lt;/li&gt;
'''
    # under uwsgi mode no start_static and static_port anchor links
    if uwsgi != True:
        outstring += '''
&lt;li&gt;&lt;a href="/acpform"&gt;acp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/start_static"&gt;start_static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localhost:''' + str(static_port) +'''"&gt;''' + str(static_port) + '''&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring


</t>
<t tx="leo.20190515144238.18">def set_css():
    
    """Set css for dynamic site
    """
    outstring = '''&lt;!doctype html&gt;
&lt;html&gt;&lt;head&gt;
&lt;meta http-equiv="content-type" content="text/html;charset=utf-8"&gt;
&lt;title&gt;''' + init.Init.site_title + '''&lt;/title&gt; \
&lt;link rel="stylesheet" type="text/css" href="/static/cmsimply.css"&gt;
&lt;link rel="shortcut icon" href="/static/favicons.png"&gt;
''' + syntaxhighlight()

    outstring += '''
&lt;script src="/static/jquery.js"&gt;&lt;/script&gt;
&lt;!-- for wink3 客製化關閉--&gt;
&lt;!--
&lt;link rel="stylesheet" type="text/css" href="/static/winkPlayer.css" /&gt;
&lt;script type="text/javascript" src="/static/winkPlayer.js"&gt;&lt;/script&gt;
--&gt;
&lt;script type="text/javascript"&gt;
$(function(){
    $("ul.topmenu&gt; li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
    $("ul.topmenu &gt; li ul li:has(ul) &gt; a").append('&lt;div class="arrow-right"&gt;&lt;/div&gt;');
});
&lt;/script&gt;
'''
    if uwsgi:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;
'''
    site_title, password = parse_config()
    outstring += '''
&lt;/head&gt;&lt;header&gt;&lt;h1&gt;''' + site_title + '''&lt;/h1&gt; \
&lt;confmenu&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="/"&gt;Home&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/sitemap"&gt;Site Map&lt;/a&gt;&lt;/li&gt;
'''
    if isAdmin():
        outstring += '''
&lt;li&gt;&lt;a href="/edit_page"&gt;Edit All&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="''' + str(correct_url()) + '''/1"&gt;Edit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/edit_config"&gt;Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/search_form"&gt;Search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/imageuploadform"&gt;image upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/image_list"&gt;image list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/fileuploadform"&gt;file upload&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/download_list"&gt;file list&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/logout"&gt;logout&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/generate_pages"&gt;generate_pages&lt;/a&gt;&lt;/li&gt;
'''
        # under uwsgi mode no start_static and static_port  anchor links
        # only added when user login as admin
        if uwsgi != True:
            outstring += '''
&lt;li&gt;&lt;a href="/acpform"&gt;acp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="/start_static"&gt;start_static&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://localhost:''' + str(static_port) +'''"&gt;''' + str(static_port) + '''&lt;/a&gt;&lt;/li&gt;
'''
    else:
        outstring += '''
&lt;li&gt;&lt;a href="/login"&gt;login&lt;/a&gt;&lt;/li&gt;
'''
    outstring += '''
&lt;/ul&gt;
&lt;/confmenu&gt;&lt;/header&gt;
'''
    return outstring


</t>
<t tx="leo.20190515144238.19">def set_css2():
    
    """Set css for static site
    """
    
    static_head = '''
        &lt;head&gt;
        &lt;title&gt;''' + init.Init.site_title + '''&lt;/title&gt;
        &lt;meta charset="utf-8"&gt;
        &lt;meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no"&gt;
        &lt;link href="https://fonts.googleapis.com/css?family=Quicksand:300,400,500,700,900" rel="stylesheet"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/fonts/icomoon/style.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/bootstrap.min.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/magnific-popup.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/jquery-ui.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/owl.carousel.min.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/owl.theme.default.min.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/bootstrap-datepicker.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/fonts/flaticon/font/flaticon.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/aos.css"&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/chimper/css/style.css"&gt;
        &lt;link rel="shortcut icon" href="./../cmsimde/static/favicons.png"&gt;
        
        &lt;style type='text/css'&gt;
            .site-section {
            background-color: #FFFF;
            padding: 40px 40px;
            }
            body &gt; div &gt; div.dropdown.open {
                display: block;
            }
        &lt;/style&gt;
    '''
    outstring = '''&lt;!DOCTYPE html&gt;&lt;html&gt;''' + static_head + '''
        &lt;!-- &lt;script src="./../cmsimde/static/jquery.js"&gt;&lt;/script&gt; --&gt;
        &lt;!-- &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;
        &lt;script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"&gt;&lt;/script&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/tipuesearch/css/normalize.min.css"&gt;
        &lt;script src="./../cmsimde/static/tipuesearch/tipuesearch_set.js"&gt;&lt;/script&gt;
        &lt;script src="tipuesearch_content.js"&gt;&lt;/script&gt;
        &lt;link rel="stylesheet" href="./../cmsimde/static/tipuesearch/css/tipuesearch.css"&gt;
        &lt;script src="./../cmsimde/static/tipuesearch/tipuesearch.js"&gt;&lt;/script&gt;
        &lt;!-- for Wink3 客製化關閉 --&gt;
        &lt;!--
        &lt;link rel="stylesheet" type="text/css" href="./../cmsimde/static/winkPlayer.css" /&gt;
        &lt;script type="text/javascript" src="./../cmsimde/static/winkPlayer.js"&gt;&lt;/script&gt;
        --&gt;
        &lt;script&gt;
            /* original tipuesearch
            $(document).ready(function() {
                 $('#tipue_search_input').tipuesearch();
            });
            */
            // customed doSearch
            function doSearch() {
                $('#tipue_search_input').tipuesearch({
                    newWindow: true, 
                    minimumLength: 2,
                    wholeWords: false, // for search 中文
                });
            }
            $(document).ready(doSearch);
        &lt;/script&gt;
        ''' + syntaxhighlight2()

    site_title, password = parse_config()
    if uwsgi:
        outstring += '''
&lt;script type="text/javascript"&gt;
if ((location.href.search(/http:/) != -1) &amp;&amp; (location.href.search(/login/) != -1)) \
window.location= 'https://' + location.host + location.pathname + location.search;
&lt;/script&gt;&lt;/head&gt;&lt;body&gt;
'''
    else:
        outstring += '''
&lt;/head&gt;
&lt;body&gt;
'''
    return outstring


</t>
<t tx="leo.20190515144238.2">@app.route('/login')
def login():
    
    """Login routine
    """
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not isAdmin():
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
                Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        return redirect('/edit_page')


</t>
<t tx="leo.20190515144238.20">def set_footer():
    
    """Footer for page
    """
    
    return "&lt;footer&gt; \
        &lt;a href='/edit_page'&gt;Edit All&lt;/a&gt;| \
        &lt;a href='" + str(correct_url) + "/1'&gt;Edit&lt;/a&gt;| \
        &lt;a href='edit_config'&gt;Config&lt;/a&gt; \
        &lt;a href='login'&gt;login&lt;/a&gt;| \
        &lt;a href='logout'&gt;logout&lt;/a&gt; \
        &lt;br /&gt;Powered by &lt;a href='http://cmsimple.cycu.org'&gt;CMSimply&lt;/a&gt; \
        &lt;/footer&gt; \
        &lt;/body&gt;&lt;/html&gt;"
</t>
<t tx="leo.20190515144238.21">@app.route('/sitemap', defaults={'edit': 1})
@app.route('/sitemap/&lt;path:edit&gt;')
def sitemap(edit):
    
    """Sitemap for dynamic site
    """
    
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    sitemap = render_menu(head, level, page, sitemap=1)
    return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + directory + \
             "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Site Map&lt;/h1&gt;" + sitemap + \
             "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144238.22">def sitemap2(head):
    
    """Sitemap for static content generation
    """
    
    edit = 0
    not_used_head, level, page = parse_content()
    directory = render_menu2(head, level, page)
    # 先改為使用 render_menu3 而非 render_menu2
    sitemap = render_menu3(head, level, page, sitemap=1)
    # add tipue search id
    return set_css2() + "&lt;div class='container'&gt;&lt;nav&gt;" + directory + \
             "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Site Map&lt;/h1&gt;&lt;div id=\"tipue_search_content\"&gt;&lt;/div&gt;" + sitemap + \
             "&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"


</t>
<t tx="leo.20190515144238.23">def sizeof_fmt(num):
    
    """Size formate
    """
    
    for x in ['bytes','KB','MB','GB']:
        if num &lt; 1024.0:
            return "%3.1f%s" % (num, x)
        num /= 1024.0
    return "%3.1f%s" % (num, 'TB')


</t>
<t tx="leo.20190515144238.24">@app.route('/ssavePage', methods=['POST'])
def ssavePage():
    
    """Seperate save page function
    """
    
    page_content = request.form['page_content']
    # add an action for submit general save or collaborative csave
    # default value for action is "save", this is for editor menu Save button
    try:
        action = request.form['action']
    except:
        action = "save"
    # when element_format : "html", need to remove the annoying comment to prevent brython exec
    page_content = page_content.replace('// &lt;![CDATA[', '')
    page_content = page_content.replace('// ]]&gt;', '')
    # page_order 就是目前編輯後希望存檔的頁面順序, 以 hidden form 提供
    # 因為單頁編輯, 因此編輯頁面的次序在 content.htm 中為絕對值
    # 但一旦單頁編輯後產生新的頁面, 此 page_order 就應該重新讀取, 此即是各單頁編輯若建立其他分頁內容, 無法直接以 ajax 將內容送進 content.htm, 而必須存檔後 reload 頁面.
    page_order = request.form['page_order']
    if not isAdmin():
        return redirect("/login")
    if page_content is None:
        return error_log("no content to save!")
    # 請注意, 若啟用 fullpage plugin 這裡的 page_content tinymce4 會自動加上 html 頭尾標註
    # for ajax save comment the next line
    #page_content = page_content.replace("\n","")
    head, level, page = parse_content()
    original_head_title = head[int(page_order)]
    # 在插入新頁面資料前, 先複製 content.htm 一分到 content_backup.htm
    shutil.copy2(config_dir + "content.htm", config_dir + "content_backup.htm")
    if page_content != "":
        with open(config_dir + "content.htm", "w", encoding="utf-8") as file:
            for index in range(len(head)):
                if index == int(page_order):
                    if action == "save":
                        file.write(page_content)
                    else:
                        # make orig and new html content into list
                        newSoup = bs4.BeautifulSoup(page_content, "html.parser")
                        newList =[str(tag) for tag in newSoup.find_all(['h1', 'h2', 'h3', 'h4', 'p', 'pre', 'ol', 'ul', 'script', 'table'])]
                        oldPage = page[index]
                        oldSoup = bs4.BeautifulSoup(oldPage, "html.parser")
                        oldList =[snTosr(tag) for tag in oldSoup.find_all(['h1', 'h2', 'h3', 'h4', 'p', 'pre', 'ol', 'ul', 'script', 'table'])]
                        mergedList = merge_sequences(oldList, newList)
                        newContent = ""
                        for i in range(len(mergedList)):
                            newContent += mergedList[i]
                        file.write(newContent)
                else:
                    file.write("&lt;h"+str(level[index])+ "&gt;" + str(head[index]) + "&lt;/h" + \
                                  str(level[index])+"&gt;"+str(page[index]))
    else:
        return error_log("Error: no content to save!")
    # if every ssavePage generate_pages needed
    #generate_pages()

    # if head[int(page_order)] still existed and equal original_head_title, go back to origin edit status, otherwise go to "/"
    # here the content is modified, we need to parse the new page_content again
    head, level, page = parse_content()
    # for debug
    # print(original_head_title, head[int(page_order)])
    # 嘗試避免因最後一個標題刪除儲存後產生 internal error 問題
    if original_head_title is None:
        return redirect("/")
    try:
        if original_head_title == head[int(page_order)]:
            #edit_url = "/get_page/" + urllib.parse.quote_plus(head[int(page_order)]) + "&amp;edit=1"
            #edit_url = "/get_page/" + urllib.parse.quote_plus(original_head_title) + "/1"
            edit_url = "/get_page/" + original_head_title + "/1"
            return redirect(edit_url)
        else:
            return redirect("/")
    except:
        return redirect("/")


</t>
<t tx="leo.20190515144238.25">def syntaxhighlight():
    
    """Return syntaxhighlight needed scripts
    """
    
    return '''
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shCore.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushBash.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushDiff.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJScript.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushJava.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushSql.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushHaxe.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushXml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPhp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushPowerShell.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushLua.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCpp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCss.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushCSharp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushDart.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/syntaxhighlighter/shBrushRust.js"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="stylesheet" href="/static/syntaxhighlighter/css/shCoreDefault.css"/&gt;
&lt;script type="text/javascript"&gt;SyntaxHighlighter.all();&lt;/script&gt;
&lt;!-- 暫時不用
&lt;script src="/static/fengari-web.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/Cango-13v08-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/CangoAxes-4v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="/static/gearUtils-05.js"&gt;&lt;/script&gt;
--&gt;
&lt;!-- for Brython 暫時不用
&lt;script src="https://scrum-3.github.io/web/brython/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"&gt;&lt;/script&gt;
--&gt;
&lt;style&gt;
img.add_border {
    border: 3px solid blue;
}
&lt;/style&gt;
'''


</t>
<t tx="leo.20190515144238.26">def syntaxhighlight2():
    
    """Return syntaxhighlight for static pages
    """
    
    return '''
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shCore.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushBash.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushDiff.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushJScript.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushJava.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushPython.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushSql.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushHaxe.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushXml.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushPhp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushPowerShell.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushLua.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushCpp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushCss.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushCSharp.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushDart.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/syntaxhighlighter/shBrushRust.js"&gt;&lt;/script&gt;
&lt;link type="text/css" rel="stylesheet" href="./../cmsimde/static/syntaxhighlighter/css/shCoreDefault.css"/&gt;
&lt;script type="text/javascript"&gt;SyntaxHighlighter.all();&lt;/script&gt;
&lt;!-- 暫時不用
&lt;script src="./../cmsimde/static/fengari-web.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/Cango-13v08-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/CangoAxes-4v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="./../cmsimde/static/gearUtils-05.js"&gt;&lt;/script&gt;
--&gt;
&lt;!-- for Brython 暫時不用
&lt;script src="https://scrum-3.github.io/web/brython/brython.js"&gt;&lt;/script&gt;
&lt;script src="https://scrum-3.github.io/web/brython/brython_stdlib.js"&gt;&lt;/script&gt;
--&gt;
&lt;style&gt;
img.add_border {
    border: 3px solid blue;
}
&lt;/style&gt;
'''


</t>
<t tx="leo.20190515144238.27">def tinymce_editor(menu_input=None, editor_content=None, page_order=None):
    
    """Tinymce editor scripts
    """
    
    sitecontent =file_get_contents(config_dir + "content.htm")
    editor = set_admin_css() + editorhead() + '''&lt;/head&gt;''' + editorfoot()
    # edit all pages
    if page_order is None:
        outstring = editor + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                        menu_input + "&lt;/nav&gt;&lt;section&gt;&lt;form onsubmit='return save_all_data(this)'&gt; \
                        &lt;textarea class='simply-editor' name='page_content' cols='50' rows='15'&gt;" +  \
                        editor_content + "&lt;/textarea&gt;&lt;input type='button' onClick='save_all()' value='save'&gt;"
        outstring +="""
        &lt;script&gt;
        // leave  warning when modification not saved
        window.addEventListener('beforeunload', function(e) {
        var myPageIsDirty = tinymce.activeEditor.isDirty()
        if(myPageIsDirty) {
            //following two lines will cause the browser to ask the user if they
            //want to leave. The text of this dialog is controlled by the browser.
            e.preventDefault(); //per the standard
            e.returnValue = ''; //required for Chrome
        }
        //else: user is allowed to leave without a warning dialog
        });
        
        function tempAlert(msg,duration)
            {
             var el = document.createElement("div");
             el.setAttribute("style","position:absolute;top:40%;left:20%;background-color:lightgreen;");
             el.innerHTML = msg;
             setTimeout(function(){
              el.parentNode.removeChild(el);
             },duration);
             document.body.appendChild(el);
            }
        
        function save_all(){
            tinymce.activeEditor.execCommand('mceSave');
        }
        
        function save_all_data(form) {
                var page_content = $('textarea#page_content').val();
                
                $.ajax({
                    type: "POST",
                    url: "/savePage",
                    data: {"page_content": page_content},
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        alert(XMLHttpRequest.status);
                        alert(XMLHttpRequest.readyState);
                        alert(textStatus);
                    },
                    success: function() {
                        //document.getElementById("notice").innerHTML = "saved!";
                        parser = new DOMParser();
                        parsed = parser.parseFromString(page_content, 'text/html');
                        paragraphs = parsed.querySelectorAll('h1, h2, h3');
                        //alert(paragraphs.length)
                        //tempAlert("saved!", 700);

                        if (paragraphs.length &gt; 1 || paragraphs.length == 0)
                        {
                            // when no title page will cause reload to error page
                            //window.location.reload();
                            document.location.href="/";
                        }
                        else
                        {
                            tempAlert("saved!", 700);
                        }
                    }
                 }); 
        }
        &lt;/script&gt;
        """
        outstring += "&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        # add viewpage button while single page editing
        head, level, page = parse_content()
        outstring = "&lt;p id='notice'&gt;&lt;/p&gt;"
        outstring  += editor + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                        menu_input+"&lt;/nav&gt;&lt;section&gt;&lt;form onsubmit='return save_data(this)'&gt; \
                        &lt;textarea class='simply-editor' id='page_content' name='page_content' cols='50' rows='15'&gt;" + \
                        editor_content + "&lt;/textarea&gt;&lt;input type='hidden'  id='page_order' name='page_order' value='" + \
                        str(page_order) + "'&gt;"
        # add an extra collaborative save button
        outstring += """&lt;input type="button" onClick="ssave()"  value="save"&gt;"""
        outstring += """&lt;input type="button" onClick="cssave()"  value="csave"&gt;"""

        outstring +="""
        &lt;script&gt;
        // leave  warning when modification not saved
        window.addEventListener('beforeunload', function(e) {
        var myPageIsDirty = tinymce.activeEditor.isDirty()
        if(myPageIsDirty) {
            //following two lines will cause the browser to ask the user if they
            //want to leave. The text of this dialog is controlled by the browser.
            e.preventDefault(); //per the standard
            e.returnValue = ''; //required for Chrome
        }
        //else: user is allowed to leave without a warning dialog
        });
        
        function tempAlert(msg,duration)
            {
             var el = document.createElement("div");
             el.setAttribute("style","position:absolute;top:40%;left:20%;background-color:lightgreen;");
             el.innerHTML = msg;
             setTimeout(function(){
              el.parentNode.removeChild(el);
             },duration);
             document.body.appendChild(el);
            }
            
        // default action is "save"
        var action ="save";
        
        function cssave(){
            action = "csave";
            tinymce.activeEditor.execCommand('mceSave');
        }
        
        function ssave(){
            action = "save";
            tinymce.activeEditor.execCommand('mceSave');
        }
        
        function save_data(form) {
                var page_content = $('textarea#page_content').val();
                var page_order = $('#page_order').val();
                
                $.ajax({
                    type: "POST",
                    url: "/ssavePage",
                    data: {"page_content": page_content, "page_order": page_order, "action": action},
                    error: function(XMLHttpRequest, textStatus, errorThrown) {
                        alert(XMLHttpRequest.status);
                        alert(XMLHttpRequest.readyState);
                        alert(textStatus);
                    },
                    success: function() {
                        //document.getElementById("notice").innerHTML = "saved!";
                        parser = new DOMParser();
                        parsed = parser.parseFromString(page_content, 'text/html');
                        paragraphs = parsed.querySelectorAll('h1, h2, h3');
                        //alert(paragraphs.length)
                        //tempAlert("saved!", 700);

                        if (paragraphs.length &gt; 1 || paragraphs.length == 0 )
                        {
                            //window.location.reload();
                            document.location.href="/";
                        }
                        else
                        {
                            tempAlert("saved!", 700);
                        }
                    }
                 }); 
        }
        &lt;/script&gt;
        """
        outstring += '''&lt;input type=button onClick="location.href='/get_page/''' + \
                    head[page_order] + \
                    ''''" value='viewpage'&gt;&lt;/form&gt;&lt;/section&gt;&lt;/body&gt;&lt;/html&gt;'''
    return outstring
    
</t>
<t tx="leo.20190515144238.28">def unique(items):
    
    """Make items element unique
    """
    
    found = set([])
    keep = []
    count = {}
    for item in items:
        if item not in found:
            count[item] = 0
            found.add(item)
            keep.append(item)
        else:
            count[item] += 1
            keep.append(str(item) + "_" + str(count[item]))
    return keep


</t>
<t tx="leo.20190515144238.3">@app.route('/logout')
def logout():
    
    """Logout routine
    """
    
    session.pop('admin_'+token , None)
    flash('已經登出!')
    return redirect(url_for('login'))


</t>
<t tx="leo.20190515144238.4">def parse_config():
    
    """Parse config
    """
    # if there is no config/config automatically generate one with content "admin"
    if not os.path.isfile(config_dir+"config"):
        # create config file if there is no config file
        # default password is admin
        password = "admin"
        hashed_password = hashlib.sha512(password.encode('utf-8')).hexdigest()
        with open(config_dir + "config", "w", encoding="utf-8") as f:
            f.write(hashed_password)

    # if there is no config/sitetitle automatically generate one with content "cmsimde"
    if not os.path.isfile(config_dir+"sitetitle"):
        # default sitetitle is "cmsimde"
        with open(config_dir + "sitetitle", "w", encoding="utf-8") as f:
            f.write("cmsimde")

    # read site_title from config/sitetitle
    site_title = file_get_contents(config_dir + "sitetitle")
    password = file_get_contents(config_dir + "config")

    return site_title, password


</t>
<t tx="leo.20190515144238.5">def _remove_h123_attrs(soup):
    
    """Remove h1-h3 tag attribute
    """
    
    tag_order = 0
    for tag in soup.find_all(['h1', 'h2', 'h3']):
        # 假如標註內容沒有字串
        #if len(tag.text) == 0:
        if len(tag.contents) ==0:
            # 且該標註為排序第一
            if tag_order == 0:
                tag.string = "First"
            else:
          # 若該標註非排序第一, 則移除無內容的標題標註
                tag.extract()
        # 針對單一元件的標題標註
        elif len(tag.contents) == 1:
            # 若內容非為純文字, 表示內容為其他標註物件
            if tag.get_text() == "":
                # 且該標註為排序第一
                if tag_order == 0:
                    # 在最前方插入標題
                    tag.insert_before(soup.new_tag('h1', 'First'))
                else:
                    # 移除 h1, h2 或 h3 標註, 只留下內容
                    tag.replaceWithChildren()
            # 表示單一元件的標題標註, 且標題為單一字串者
            else:
                # 判定若其排序第一, 則將 tag.name 為 h2 或 h3 者換為 h1
                if tag_order == 0 and tag.name != "h1":
                    tag.name = "h1"
            # 針對其餘單一字串內容的標註, 則保持原樣
        # 針對內容一個以上的標題標註
        #elif len(tag.contents) &gt; 1:
        else:
            # 假如該標註內容長度大於 1
            # 且該標註為排序第一
            if tag_order == 0:
                # 先移除 h1, h2 或 h3 標註, 只留下內容
                #tag.replaceWithChildren()
                # 在最前方插入標題
                tag.insert_before(soup.new_tag('h1', 'First'))
            else:
                # 只保留標題內容,  去除 h1, h2 或 h3 標註
                # 為了與前面的內文區隔, 先在最前面插入 br 標註
                tag.insert_before(soup.new_tag('br'))
                # 再移除非排序第一的 h1, h2 或 h3 標註, 只留下內容
                tag.replaceWithChildren()
        tag_order = tag_order + 1

    return soup

</t>
<t tx="leo.20190515144238.6">def parse_content():
    
    """Use bs4 and re module functions to parse content.htm
    """
    
    #from pybean import Store, SQLiteWriter
    # if no content.db, create database file with cms table
    '''
    if not os.path.isfile(config_dir+"content.db"):
        library = Store(SQLiteWriter(config_dir+"content.db", frozen=False))
        cms = library.new("cms")
        cms.follow = 0
        cms.title = "head 1"
        cms.content = "content 1"
        cms.memo = "first memo"
        library.save(cms)
        library.commit()
    '''
    # if no content.htm, generate a head 1 and content 1 file
    if not os.path.isfile(config_dir+"content.htm"):
        return "Error: no content.htm"
        '''
        # create content.htm if there is no content.htm
        with open(config_dir + "content.htm", "w", encoding="utf-8") as f:
            f.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        '''
    subject = file_get_contents(config_dir+"content.htm")
    # deal with content without content
    if subject == "":
        return "Error: no data in content.htm"
        '''
        # create content.htm if there is no content.htm
        with open(config_dir + "content.htm", "w", encoding="utf-8") as f:
            f.write("&lt;h1&gt;head 1&lt;/h1&gt;content 1")
        subject = "&lt;h1&gt;head 1&lt;/h1&gt;content 1"
        '''
    # initialize the return lists
    head_list = []
    level_list = []
    page_list = []
    # make the soup out of the html content
    soup = bs4.BeautifulSoup(subject, 'html.parser')
    # 嘗試解讀各種情況下的標題
    soup = _remove_h123_attrs(soup)
    # 改寫 content.htm 後重新取 subject
    with open(config_dir + "content.htm", "wb") as f:
        f.write(soup.encode("utf-8"))
    subject = file_get_contents(config_dir+"content.htm")
    # get all h1, h2, h3 tags into list
    htag= soup.find_all(['h1', 'h2', 'h3'])
    n = len(htag)
    # get the page content to split subject using each h tag
    temp_data = subject.split(str(htag[0]))
    if len(temp_data) &gt; 2:
        subject = str(htag[0]).join(temp_data[1:])
    else:
        subject = temp_data[1]
    if n &gt;1:
            # i from 1 to i-1
            for i in range(1, len(htag)):
                head_list.append(htag[i-1].text.strip())
                # use name attribute of h* tag to get h1, h2 or h3
                # the number of h1, h2 or h3 is the level of page menu
                level_list.append(htag[i-1].name[1])
                temp_data = subject.split(str(htag[i]))
                if len(temp_data) &gt; 2:
                    subject = str(htag[i]).join(temp_data[1:])
                else:
                    subject = temp_data[1]
                # cut the other page content out of htag from 1 to i-1
                cut = temp_data[0]
                # add the page content
                page_list.append(cut)
    # last i
    # add the last page title
    head_list.append(htag[n-1].text.strip())
    # add the last level
    level_list.append(htag[n-1].name[1])
    temp_data = subject.split(str(htag[n-1]))
    # the last subject
    subject = temp_data[0]
    # cut the last page content out
    cut = temp_data[0]
    # the last page content
    page_list.append(cut)
    return head_list, level_list, page_list


</t>
<t tx="leo.20190515144238.7">def render_menu(head, level, page, sitemap=0):
    
    """允許使用者在 h1 標題後直接加上 h3 標題, 或者隨後納入 h4 之後作為標題標註
     """
    
    directory = ""
    # 從 level 數列第一個元素作為開端
    current_level = level[0]
    # 若是 sitemap 則僅列出樹狀架構而沒有套用 css3menu 架構
    if sitemap:
        directory += "&lt;ul&gt;"
    else:
        directory += "&lt;ul id='css3menu1' class='topmenu'&gt;"
    # 逐一配合 level 數列中的各標題階次, 一一建立對應的表單或 sitemap
    for index in range(len(head)):
        # 用 this_level 取出迴圈中逐一處理的頁面對應層級, 注意取出值為 str
        this_level = level[index]
        # 若處理中的層級比上一層級高超過一層, 則將處理層級升級 (處理 h1 後直接接 h3 情況)
        if (int(this_level) - int(current_level)) &gt; 1:
            #this_level = str(int(this_level) - 1)
            # 考慮若納入 h4 也作為標題標註, 相鄰層級可能大於一層, 因此直接用上一層級 + 1
            this_level = str(int(current_level) + 1)
        # 若處理的階次比目前已經處理的階次大, 表示位階較低
        # 其實當 level[0] 完全不會報告此一區塊
        # 從正在處理的標題階次與前一個元素比對, 若階次低, 則要加入另一區段的 unordered list 標頭
        # 兩者皆為 str 會轉為整數後比較
        if this_level &gt; current_level:
            directory += "&lt;ul&gt;"
            directory += "&lt;li&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
        # 假如正在處理的標題與前一個元素同位階, 則必須再判定是否為另一個 h1 的樹狀頭
        elif this_level == current_level:
            # 若正在處理的標題確實為樹狀頭, 則標上樹狀頭開始標註
            if this_level == 1:
                # 這裡還是需要判定是在建立 sitemap 模式或者選單模式
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index]+"&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
            #  假如不是樹狀頭, 則只列出對應的 list
            else:
                directory += "&lt;li&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
        # 假如正處理的元素比上一個元素位階更高, 必須要先關掉前面的低位階區段
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if this_level == 1:
                if sitemap:
                    directory += "&lt;li&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                directory += "&lt;li&gt;&lt;a href='/get_page/" + head[index] + "'&gt;" + head[index] + "&lt;/a&gt;"
        current_level = this_level
    directory += "&lt;/li&gt;&lt;/ul&gt;"
    return directory


</t>
<t tx="leo.20190515144238.8">def render_menu2(head, level, page, sitemap=0):
    
    """Render menu for static site
    """
    
    site_title, password = parse_config()
    directory = '''
    &lt;div class="site-wrap"&gt;

    &lt;div class="site-mobile-menu"&gt;
      &lt;div class="site-mobile-menu-header"&gt;
        &lt;div class="site-mobile-menu-close mt-3"&gt;
          &lt;span class="icon-close2 js-menu-toggle"&gt;&lt;/span&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class="site-mobile-menu-body"&gt;&lt;/div&gt;
    &lt;/div&gt;
    
            &lt;header class="site-navbar py-4 bg-white" role="banner"&gt;
              &lt;div class="container"&gt;
                &lt;div class="row align-items-center"&gt;
                &lt;h1&gt;''' + site_title + '''&lt;/h1&gt;
                &lt;div class="pl-4"&gt;
                    &lt;form&gt;
                    &lt;input type="text" placeholder="Search" name="q" id="tipue_search_input" pattern=".{2,}" title="At least 2 characters" required&gt;
                    &lt;/form&gt;
                &lt;/div&gt;
                  &lt;!-- &lt;div class="col-11 col-xl-2"&gt;
                    &lt;h1 class="mb-0 site-logo"&gt;&lt;a href="index.html" class="text-black h2 mb-0"&gt;''' + site_title + '''&lt;/a&gt;&lt;/h1&gt; 
                  &lt;/div&gt;
                  --&gt;
                  &lt;div class="col-12 col-md-10 d-none d-xl-block"&gt;
                    &lt;nav class="site-navigation position-relative text-right" role="navigation"&gt;
    '''
    
    # 從 level 數列第一個元素作為開端, 第一個一定非 level 1 不可
    current_level = level[0]
    # 若是 sitemap 則僅列出樹狀架構而沒有套用 css3menu 架構
    if sitemap:
        directory += '''&lt;ul&gt;
&lt;li&gt;
&lt;form&gt;
&lt;div class="tipue_search_group"&gt;
&lt;input type="text" name="q" id="tipue_search_input" pattern=".{2,}" title="At least 2 characters" required&gt;&lt;button type="submit" class="tipue_search_button"&gt;&lt;div class="tipue_search_icon"&gt;&amp;#9906;&lt;/div&gt;&lt;/button&gt;
&lt;/div&gt;
&lt;/form&gt;
&lt;/li&gt;
        '''
    else:
        directory += '''&lt;ul class='site-menu js-clone-nav mr-auto d-none d-lg-block'&gt;'''
    # 納入主頁與表單
    directory += '''
                        &lt;li class="active has-children"&gt;&lt;a href="index.html"&gt;Home&lt;/a&gt;
                        &lt;ul class="dropdown"&gt;
                            &lt;li&gt;&lt;a href="sitemap.html"&gt;Site Map&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="./../reveal/index.html"&gt;reveal&lt;/a&gt;&lt;/li&gt;
                            &lt;li&gt;&lt;a href="./../blog/index.html"&gt;blog&lt;/a&gt;&lt;/li&gt;
                        &lt;/ul&gt;
                      &lt;/li&gt;
                     '''
    # 逐一配合 level 數列中的各標題階次, 一一建立對應的表單或 sitemap
    for index in range(len(head)):
        # 用 this_level 取出迴圈中逐一處理的頁面對應層級, 注意取出值為 str
        this_level = level[index]
        # 若處理中的層級比上一層級高超過一層, 則將處理層級升級 (處理 h1 後直接接 h3 情況)
        if (int(this_level) - int(current_level)) &gt; 1:
            #this_level = str(int(this_level) - 1)
            # 考慮若納入 h4 也作為標題標註, 相鄰層級可能大於一層, 因此直接用上一層級 + 1
            this_level = str(int(current_level) + 1)
        # 若處理的階次比目前已經處理的階次大, 表示位階較低
        # 其實當 level[0] 完全不會報告此一區塊
        # 從正在處理的標題階次與前一個元素比對, 若階次低, 則要加入另一區段的 unordered list 標頭
        # 兩者皆為 str 會轉為整數後比較
        # 目前的位階在上一個標題之後
        if this_level &gt; current_level:
            directory += "&lt;ul class='dropdown'&gt;"
            # 是否加上 class=has-children, 視下一個而定
            # 目前處理的標題, 並不是最後一個, 因此有下一個標題待處理
            if index &lt; (len(head)-1):
                next_level = level[index+1]
                if this_level &lt; next_level:
                    # 表示要加上 class=dropdown
                    directory += "&lt;li class='has-children'&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                #表示為最後一個
                directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        # 假如正在處理的標題與前一個元素同位階, 則必須再判定是否為另一個 h1 的樹狀頭
        # 目前標題與上一個標題相同
        elif this_level == current_level:
            # 是否加上 class=has-children, 視下一個而定
            # 目前處理的標題, 並不是最後一個, 因此有下一個標題待處理
            if index &lt; (len(head)-1):
                next_level = level[index+1]
                if this_level &lt; next_level:
                    # 表示要加上 class=dropdown
                    directory += "&lt;li class='has-children'&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                #表示為最後一個
                directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        # 假如正處理的元素比上一個元素位階更高, 必須要先關掉前面的低位階區段
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if index &lt; (len(head)-1):
                next_level = level[index+1]
                if this_level &lt; next_level:
                    # 表示要加上 class=dropdown
                    directory += "&lt;li class='has-children'&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                #表示為最後一個
                directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        current_level = this_level
    directory += '''&lt;/li&gt;
                      &lt;/ul&gt;
                &lt;/nav&gt;
              &lt;/div&gt;
              &lt;div class="d-inline-block d-xl-none ml-md-0 mr-auto py-3" style="position: relative; top: 3px;"&gt;&lt;a href="#" class="site-menu-toggle js-menu-toggle text-black"&gt;&lt;span class="icon-menu h3"&gt;&lt;/span&gt;&lt;/a&gt;&lt;/div&gt;
              &lt;/div&gt;

            &lt;/div&gt;
          &lt;/div&gt;
          
        &lt;/header&gt;
    '''
    return directory


</t>
<t tx="leo.20190515144238.9">def render_menu3(head, level, page, sitemap=0):
    
    """Render menu for static sitemap
    """
    
    directory = ""
    current_level = level[0]
    if sitemap:
        directory += "&lt;ul&gt;"
    else:
        # before add tipue search function
        #directory += "&lt;ul id='css3menu1' class='topmenu'&gt;"
        directory += "&lt;ul id='css3menu1' class='topmenu'&gt;&lt;div class=\"tipue_search_group\"&gt;&lt;input style=\"width: 6vw;\" type=\"text\" name=\"q\" id=\"tipue_search_input\" pattern=\".{2,}\" title=\"Press enter key to search\" required&gt;&lt;/div&gt;"
    for index in range(len(head)):
        this_level = level[index]
        # 若處理中的層級比上一層級高超過一層, 則將處理層級升級 (處理 h1 後直接接 h3 情況)
        if (int(this_level) - int(current_level)) &gt; 1:
            #this_level = str(int(this_level) - 1)
            this_level = str(int(current_level) + 1)
        if this_level &gt; current_level:
            directory += "&lt;ul&gt;"
            #directory += "&lt;li&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
            # 改為連結到 content/標題.html
            directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        elif this_level == current_level:
            if this_level == 1:
                if sitemap:
                    # 改為連結到 content/標題.html
                    #directory += "&lt;li&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                    directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    #directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='content/" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                #directory += "&lt;li&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        else:
            directory += "&lt;/li&gt;"*(int(current_level) - int(level[index]))
            directory += "&lt;/ul&gt;"*(int(current_level) - int(level[index]))
            if this_level == 1:
                if sitemap:
                    #directory += "&lt;li&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                    directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
                else:
                    #directory += "&lt;li class='topmenu'&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                    directory += "&lt;li class='topmenu'&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
            else:
                #directory += "&lt;li&gt;&lt;a href='/get_page/"+head[index]+"'&gt;"+head[index]+"&lt;/a&gt;"
                directory += "&lt;li&gt;&lt;a href='" + head[index] + ".html'&gt;" + head[index] + "&lt;/a&gt;"
        current_level = this_level
    directory += "&lt;/li&gt;&lt;/ul&gt;"
    return directory


</t>
<t tx="leo.20190515144242.1">#!/usr/bin/python

"""Flask startup script
"""

@others
if uwsgi:
    # run on remote site
    application = flaskapp.app
else:
    # on localhost, on Linux or Mac need to use python3 wsgi.py to execute
    flaskapp.app.run(host=ip, port=port, debug=True, ssl_context="adhoc")
@language python
@tabwidth -4
</t>
<t tx="leo.20190515144254.1">import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__)))
# import flaskapp at the same directory
import flaskapp

# get uwsgi, ip and port variable values of flaskapp.py
uwsgi = flaskapp.uwsgi
ip = flaskapp.ip
port = flaskapp.dynamic_port

</t>
<t tx="leo.20190603204847.1"></t>
<t tx="leo.20190603204921.1">@others
@language python
@tabwidth -4
</t>
<t tx="leo.20190603204931.1">import os

"""CMSimfly Initialization setup
"""

# get current directory, on Windows, back slash at the end of the directory
_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))
# config directory
config_dir = _curdir + "/config/"
</t>
<t tx="leo.20190603204931.2">class Init(object):
    # uwsgi as static class variable, can be accessed by Init.uwsgi
    uwsgi = False
    site_title = "cmsimde_site"
    ip = "127.0.0.1"
    dynamic_port = 9443
    static_port = 8443
    @others
</t>
<t tx="leo.20190603204931.3">def __init__(self):
    # hope to create downloads and images directories　
    if not os.path.isdir(_curdir + "/downloads"):
        try:
            os.makedirs(_curdir + "/downloads")
        except:
            print("mkdir error")
    if not os.path.isdir(_curdir + "/images"):
        try:
            os.makedirs(_curdir + "/images")
        except:
            print("mkdir error")


</t>
<t tx="leo.20190603205008.1">@others
@language python
@tabwidth -4
</t>
<t tx="leo.20190603205008.2">from flask import Blueprint, render_template, current_app, \
    send_from_directory, session, redirect, url_for
import os

userapp = Blueprint('user', __name__, url_prefix='/user', template_folder='templates')




</t>
<t tx="leo.20190603205008.3">@userapp.route('/')
def index():
    user = "Yen"
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
    return render_template('g1index.html', user=user)
</t>
<t tx="leo.20190603205008.4">@userapp.route('/threegear', defaults={'n1':15,'n2':20,'n3':18})
@userapp.route('/threegear/&lt;n1&gt;/&lt;n2&gt;/&lt;n3&gt;')
def threegear(n1, n2, n3):
    # 真正最後的架構應該要在函式中準備繪圖所需的資料, 然後用 template 呈現內容
    title = "網際 2D 繪圖"
    head = '''
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;'''+ title +'''&lt;/title&gt;
    &lt;!-- IE 9: display inline SVG --&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=9"&gt;
'''
    script = '''
&lt;script type="text/javascript" src="https://brython.info/src/brython_dist.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango-8v03.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/Cango2D-7v01-min.js"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="https://2015fallhw.github.io/cptocadp/static/gearUtils-05.js"&gt;&lt;/script&gt;
 
&lt;script&gt;
window.onload=function(){
brython(1);
}
&lt;/script&gt;
'''
    headstring = head + script + "&lt;/head&gt;"
    # 能否根據 n1, n2, n3 與 width, 算出合理的 height
    # 模數計算 m = canvas.width*0.8/(n1+n2+n3)
    # max([int(n1), int(n2), int(n3)])
    # 所以 height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    height = 1.2*800*0.8/(int(n1)+int(n2)+int(n3))*max([int(n1), int(n2), int(n3)])
    body = '''
    
延伸應用:&lt;br /&gt;

軸孔加入 keyway &lt;br /&gt;
與 3D 零件設計繪圖對應 &lt;br/&gt;
與 2D/3D 軸的設計與繪圖對應&lt;br /&gt;&lt;br /&gt;
&lt;canvas id='gear1' width='800' height="'''+str(int(height))+'''"&gt;&lt;/canvas&gt;
 
&lt;script type="text/python"&gt;
# 將 導入的 document 設為 doc 主要原因在於與舊程式碼相容
from browser import document as doc
# 由於 Python3 與 Javascript 程式碼已經不再混用, 因此來自 Javascript 的變數, 必須居中透過 window 物件轉換
from browser import window
# 針對 Javascript 既有的物件, 則必須透過 JSConstructor 轉換
from javascript import JSConstructor
import math
 
# 主要用來取得畫布大小
canvas = doc["gear1"]
# 此程式採用 Cango Javascript 程式庫繪圖, 因此無需 ctx
#ctx = canvas.getContext("2d")
# 針對類別的轉換, 將 Cango.js 中的 Cango 物件轉為 Python cango 物件
cango = JSConstructor(window.Cango)
# 針對變數的轉換, shapeDefs 在 Cango 中資料型別為變數, 可以透過 window 轉換
shapedefs = window.shapeDefs
# 目前 Cango 結合 Animation 在 Brython 尚無法運作, 此刻只能繪製靜態圖形
# in CangoAnimation.js
#interpolate1 = window.interpolate
# Cobi 與 createGearTooth 都是 Cango Javascript 程式庫中的物件
cobj = JSConstructor(window.Cobj)
creategeartooth = JSConstructor(window.createGearTooth)
 
# 經由 Cango 轉換成 Brython 的 cango, 指定將圖畫在 id="plotarea" 的 canvas 上
cgo = cango("gear1")
 
######################################
# 畫正齒輪輪廓
#####################################
def spur(cx, cy, m, n, pa, theta):
    # n 為齒數
    #n = 17
    # pa 為壓力角
    #pa = 25
    # m 為模數, 根據畫布的寬度, 計算適合的模數大小
    # Module = mm of pitch diameter per tooth
    #m = 0.8*canvas.width/n
    # pr 為節圓半徑
    pr = n*m/2 # gear Pitch radius
    # generate gear
    data = creategeartooth(m, n, pa)
    # Brython 程式中的 print 會將資料印在 Browser 的 console 區
    #print(data)
 
    gearTooth = cobj(data, "SHAPE", {
            "fillColor":"#ddd0dd",
            "border": True,
            "strokeColor": "#606060" })
    #gearTooth.rotate(180/n) # rotate gear 1/2 tooth to mesh, 請注意 rotate 角度為 degree
    # theta 為角度
    gearTooth.rotate(theta) 
    # 單齒的齒形資料經過旋轉後, 將資料複製到 gear 物件中
    gear = gearTooth.dup()
    # gear 為單一齒的輪廓資料
    #cgo.render(gearTooth)
 
    # 利用單齒輪廓旋轉, 產生整個正齒輪外形
    for i in range(1, n):
        # 將 gearTooth 中的資料複製到 newTooth
        newTooth = gearTooth.dup()
        # 配合迴圈, newTooth 的齒形資料進行旋轉, 然後利用 appendPath 方法, 將資料併入 gear
        newTooth.rotate(360*i/n)
        # appendPath 為 Cango 程式庫中的方法, 第二個變數為 True, 表示要刪除最前頭的 Move to SVG Path 標註符號
        gear.appendPath(newTooth, True) # trim move command = True
 
    # 建立軸孔
    # add axle hole, hr 為 hole radius
    hr = 0.6*pr # diameter of gear shaft
    shaft = cobj(shapedefs.circle(hr), "PATH")
    shaft.revWinding()
    gear.appendPath(shaft) # retain the 'moveTo' command for shaft sub path
    gear.translate(cx, cy)
    # render 繪出靜態正齒輪輪廓
    cgo.render(gear)
    # 接著繪製齒輪的基準線
    deg = math.pi/180
    Line = cobj(['M', cx, cy, 'L', cx+pr*math.cos(theta*deg), cy+pr*math.sin(theta*deg)], "PATH", {
          'strokeColor':'blue', 'lineWidth': 1})
    cgo.render(Line)
 
# 3個齒輪的齒數
n1 = '''+str(n1)+'''
n2 = '''+str(n2)+'''
n3 = '''+str(n3)+'''
 
# m 為模數, 根據畫布的寬度, 計算適合的模數大小
# Module = mm of pitch diameter per tooth
# 利用 80% 的畫布寬度進行繪圖
# 計算模數的對應尺寸
m = canvas.width*0.8/(n1+n2+n3)
 
# 根據齒數與模組計算各齒輪的節圓半徑
pr1 = n1*m/2
pr2 = n2*m/2
pr3 = n3*m/2
 
# 畫布左右兩側都保留畫布寬度的 10%
# 依此計算對應的最左邊齒輪的軸心座標
cx = canvas.width*0.1+pr1
cy = canvas.height/2
 
# pa 為壓力角
pa = 25
 
# 畫最左邊齒輪, 定位線旋轉角為 0, 軸心座標 (cx, cy)
spur(cx, cy, m, n1, pa, 0)
# 第2個齒輪將原始的定位線逆時鐘轉 180 度後, 與第1個齒輪正好齒頂與齒頂對齊
# 只要第2個齒輪再逆時鐘或順時鐘轉動半齒的角度, 即可完成囓合
# 每一個齒分別包括從齒根到齒頂的範圍, 涵蓋角度為 360/n, 因此所謂的半齒角度為 180/n
spur(cx+pr1+pr2, cy, m, n2, pa, 180-180/n2)
# 第2齒與第3齒的囓合, 首先假定第2齒的定位線在 theta 角為 0 的原始位置
# 如此, 第3齒只要逆時鐘旋轉 180 度後, 再逆時鐘或順時鐘轉動半齒的角度, 即可與第2齒囓合
# 但是第2齒為了與第一齒囓合時, 已經從原始定位線轉了 180-180/n2 度
# 而當第2齒從與第3齒囓合的定位線, 逆時鐘旋轉 180-180/n2 角度後, 原先囓合的第3齒必須要再配合旋轉 (180-180/n2 )*n2/n3
spur(cx+pr1+pr2+pr2+pr3, cy, m, n3, pa, 180-180/n3+(180-180/n2)*n2/n3)
&lt;/script&gt;
'''
    bodystring = "&lt;body&gt;" + body+"&lt;/body&gt;"
    endstring = "&lt;/html&gt;"
    outstring = headstring + bodystring + endstring
    return outstring
    # 若 template 檔案名稱與位於外部 templates 目錄中的檔案同名, 則取外部的 template
   # return render_template('g1index.html', user=user)
</t>
<t tx="leo.20201127112020.1">https://github.com/mdecourse/cmsimde.git

2020.11.27 在網際編輯區新增一個 collabSave 按鈕, 可以在存檔時合併現有可能已經被改版的 content.htm 對應頁面內容.

edit all 將會無視編輯期間, 原有 content.htm 已被改版的內容, 在協同流程可能會丟失資料, 因此協同編輯時儘量不採 edit all 模式.

目前的設計利用同名的 action button, 以其值為 save 或 csave 區分進行一般存檔或協同存檔.

2021.03.20 準備新增一個功能, 可以從 content 目錄中的 .html 檔案組合出對應的 config/content.htm, 意即可以雙向轉換動態與靜態網站的內容.

從動態轉為靜態時必須將 H1, H2 或 H3 以 &lt;!-- --&gt; 寫在標題行下, 以便讓靜態網頁可以再轉回動態網頁.
</t>
<t tx="leo.20201127112424.1"># for merging two lists and preserve the duplicated elements
'''
def merge_sequences(seq1,seq2):
    sm=SequenceMatcher(a=seq1,b=seq2)
    res = []
    for (op, start1, end1, start2, end2) in sm.get_opcodes():
        if op == 'equal' or op=='delete':
            #This range appears in both sequences, or only in the first one.
            res += seq1[start1:end1]
        elif op == 'insert':
            #This range appears in only the second sequence.
            res += seq2[start2:end2]
        elif op == 'replace':
            #There are different ranges in each sequence - add both.
            res += seq1[start1:end1]
            res += seq2[start2:end2]
    return res

'''


def merge_sequences(list1, list2):
    
    """Merge sequences
    """
    
    # Exit if list2 is empty
    if not len(list2):
        return list1
    # Copy the content of list2 into merged list
    merged = list2.copy()

    # Create a list for storing temporary elements
    elements = []
    # Create a variable for storing previous element found in both lists
    previous = None

    # Loop through the elements of list1
    for e in list1:
        # Append the element to "elements" list if it's not in list2
        if e not in merged:
            elements.append(e)

        # If it is in list2 (is a common element)
        else:

            # Loop through the stored elements
            for x in elements:
                # Insert all the stored elements after the previous common element
                merged.insert(previous and merged.index(previous) + 1 or 0, x)
            # Save new common element to previous
            previous = e
            # Empty temporary elements
            del elements[:]

    # If no more common elements were found but there are elements still stored
    if len(elements):
        # Insert them after the previous match
        for e in elements:
            merged.insert(previous and merged.index(previous) + 1 or 0, e)
    # Return the merged list
    return merged


</t>
<t tx="leo.20201127112439.1"># replace slash n with slash r
def snTosr(tag):
    
    """Replace slash n with slash r
    """
    
    tagStr = str(tag)
    # 只要編輯區標註有跳行內容者, 都需要轉換跳行符號
    if tag.name in ["pre", "script"]:
        return tagStr.replace("\n", "\r")
    else:
        return tagStr
</t>
<t tx="leo.20210320210418.1">@language python
"""
希望組合 content.htm 前必須確定 content 目錄中各檔案符合下列需求
html 架構符合 generate_pages 後的內容, 包含 images, downloads 連結
各頁面帶有 level meta 資料
"""
import os
from bs4 import BeautifulSoup

# 進入目錄,  讀取檔案主檔名與副檔名後取出 meta 中標註頁面 level 值
# 必須配合新版 generate_pages 中已經置入 level meta 資料進行後續處理
# html_doc = html_doc.replace('&lt;meta charset="utf-8"&gt;', '&lt;meta charset="utf-8"&gt;\n&lt;meta property="head" content="H'+str(level[i])+'"&gt;')
for dname, dirs, files in os.walk("y:/tmp/cmstemplate/content"):
    for fname in files:
        fileMain, fileExt = os.path.splitext(fname)
        if fileExt == ".html":
            if fname not in ["index.html","sitemap.html"]:
                vName = os.path.join(dname, fname)
                with open(vName, "r", encoding="utf-8") as f:
                    fContent = f.read()
                    soup = BeautifulSoup(fContent, "lxml")
                    meta = soup.find("meta", property="head")
                    head = meta["content"]
                    print(head, fname)
                    # 接下來必須逆向 generate_pages 流程, 以各頁內容組成 content.htm</t>
<t tx="leo.20210320213557.1">@language python

get_page() 用於取頁面資料顯示

    edit=1 表示要進入編輯模式
    heading 為所要取頁面的標題

get_page2() 則與 get_page() 取頁面內容功能相同, 但用於將動態內容替換為準備 generate_pages 用, 其中有以下替換:

    # 直接在此將 /images/ 換為 ./../images/, /downloads/ 換為 ./../downloads/, 以 content 為基準的相對目錄設定
    page = [w.replace('src="/images/', 'src="./../images/') for w in page]
    page = [w.replace('href="/downloads/', 'href="./../downloads/') for w in page]
    # 假如有 src="/static/ace/ 則換為 src="./../static/ace/
    page = [w.replace('src="/static/', 'src="./../cmsimde/static/') for w in page]
    # 假如有 src=/downloads 則換為 src=./../../downloads
    page = [w.replace('src="/downloads', 'src="./../downloads') for w in page]
    # 假如有 pythonpath:['/static/'] 則換為, 因為要導入位於 downloads 中的其他 .py, 因此去掉最後的中括號
    page = [w.replace("pythonpath:['/static/'", "pythonpath:['./../cmsimde/static/'") for w in page]

若從靜態 content/ 中的 .html 轉回 config/content.htm, 則必須進行反向轉換.
</t>
<t tx="leo.20210424092822.1">@language python
    
get_page2 中的字串代換, 增加在動態與靜態網頁, 可自行擷取網站內容頁面連結

尚未完成</t>
<t tx="leo.20220911144657.1">此次修改主要針對 Replit 上執行的需求

1. 將 nocache.py 複製一份, 放入 up_directory, 因為 Replit 要在根目錄中, 以 main.py 執行.
2. main.py 讓 cmsimde 以 wsgi 模式執行, 內容如下

# for replit
from cmsimde import flaskapp
from gevent.pywsgi import WSGIServer

#flaskapp.app.run(host="0.0.0.0", debug=True)
http_server = WSGIServer(('0.0.0.0', 8080), flaskapp.app)
http_server.serve_forever()</t>
<t tx="leo.20220924163559.1">目前將 site title 與 password 放在 config/config 檔案, 在此希望只將 password 保留在 config/config, 然後將 site title 的存取移出 config, 將其命名為 config/sitename

處理 config/config 的 function 為 edit_config 與 saveConfig</t>
<t tx="leo.20221005075601.1">def correct_url():

    """get the correct url for http and https edit mode
        to replace original request.url under set_admin_css, set_css and set_footer
    """
    url = request.url
    if request.is_secure:
        return url
    else:
        url = url.replace("http://", "https://", 1)
        return url</t>
<t tx="leo.20221017090913.1">@app.route('/acpform')
def acpform():
    
    """acp form routine
    """
    head, level, page = parse_content()
    directory = render_menu(head, level, page)
    if not isAdmin():
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Login&lt;/h1&gt;&lt;form method='post' action='checkLogin'&gt; \
                Password:&lt;input type='password' name='password'&gt; \
    &lt;input type='submit' value='login'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"
    else:
        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;" + \
                 directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Acp From&lt;/h1&gt;&lt;form method='post' action='doAcp'&gt; \
                Commit Messages:&lt;textarea name='commit' rows='1' cols='80'&gt;&lt;/textarea&gt; \
    &lt;input type='submit' value='acp'&gt;&lt;/form&gt; \
    &lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"</t>
<t tx="leo.20221017090933.1">@app.route('/doAcp', methods=['POST'])
def doAcp():

    """Action to search content.htm using keyword
    """

    if not isAdmin():
        return redirect("/login")
    else:
        commit_messages = request.form['commit']
        head, level, page = parse_content()
        directory = render_menu(head, level, page)
        # execute acp.bat with commit_messages
        if os.name == 'nt':
            os.system("acp.bat \"" + commit_messages + "\"")
        else:
            os.system("./acp \"" + commit_messages + "\"")

        return set_css() + "&lt;div class='container'&gt;&lt;nav&gt;"+ \
                   directory + "&lt;/nav&gt;&lt;section&gt;&lt;h1&gt;Acp done&lt;/h1&gt;Acp done&lt;/section&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;"




</t>
<t tx="leo.20221017090940.1">add acpForm and doAcp</t>
<t tx="yen.20200710111924.1">def checkMath():

    """Use LaTeX Equation rendering
    """
    outstring = '''
&lt;!-- 啟用 LaTeX equations 編輯 --&gt;
  &lt;!-- &lt;script&gt;
  MathJax = {
    tex: {inlineMath: [['$', '$'], ['\\(', '\\)']]}
  };
  &lt;/script&gt;
  &lt;script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml.js"&gt;&lt;/script&gt;--&gt;
    '''
    return outstring


</t>
<t tx="yen.20210704112438.1">@app.route('/favicon.ico')
def favicon():
    
    """Add favicon
    """
    
    return send_from_directory(_curdir, 'favicon.ico', mimetype='image/vnd.microsoft.icon')
</t>
<t tx="yen.20210707134934.1"># 因為需要在 download 中導入其他 brython .py 模組, 因此刪除 ]

page = [w.replace("pythonpath:['/static/'", "pythonpath:['./../cmsimde/static/'") for w in page]

# 因為最後發現 browser cookie 取決於 secret_key, 只要採用固定的 secret_key, 就可以多個近端的動態系統採用不同 port 啟動. 因此以下修改 admin 名稱的作法並不需要. 但也不打算改回來.

# 以下修改仍然保留
因為要在同一個 browser session 同時開啟多個 cmsimde 動態網站, 因此利用

def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    return ''.join(random.choice(chars) for _ in range(size))
    
在 admin session 後面加上一個四字 token.

password_generator() 函式需要 random 與 string 模組.
</t>
<t tx="yen.20210708085937.1">def password_generator(size=4, chars=string.ascii_lowercase + string.digits):
    
    """Generate random password
    """
    return ''.join(random.choice(chars) for _ in range(size))

    
# 定義 password_generator() 後就可以產生 token
token = password_generator()
</t>
<t tx="yen.20210708234039.1">def get_page2(heading, head, edit, get_page_content = None):
    
    """Get page content and replace certain string for static site
    """
    
    not_used_head, level, page = parse_content()
    # 直接在此將 /images/ 換為 ./../images/, /downloads/ 換為 ./../downloads/, 以 content 為基準的相對目錄設定

    page = [w.replace('src="/images/', 'src="./../images/') for w in page]
    page = [w.replace('href="/downloads/', 'href="./../downloads/') for w in page]
    # 假如有 src="/static/ace/ 則換為 src="./../static/ace/
    page = [w.replace('src="/static/', 'src="./../cmsimde/static/') for w in page]
    # 假如有 src=/downloads 則換為 src=./../../downloads
    page = [w.replace('src="/downloads', 'src="./../downloads') for w in page]
    # 假如有 pythonpath:['/static/' 則換為 ./../cmsimde/static/
    page = [w.replace("pythonpath:['/static/'", "pythonpath:['./../cmsimde/static/'") for w in page]
    # 針對 wink3 假如有 data-dirname="/static" 換為 data-dirname="./../cmsimde/static"
    page = [w.replace("data-dirname=\"/static\"", "data-dirname=\"./../cmsimde/static\"") for w in page]
    # 假如有 /get_page 則需額外使用 regex 進行字串代換, 表示要在靜態網頁直接取網頁 (尚未完成)
    #page = [w.replace('/get_page', '') for w in page]

    directory = render_menu2(head, level, page)
    if heading is None:
        heading = head[0]
    # 因為同一 heading 可能有多頁, 因此不可使用 head.index(heading) 搜尋 page_order
    page_order_list, page_content_list = search_content(head, page, heading)
    if get_page_content != None:
        get_page_content.extend(page_content_list)
    return_content = ""
    pagedata = ""
    outstring = ""
    outstring_duplicate = ""
    pagedata_duplicate = ""
    outstring_list = []
    for i in range(len(page_order_list)):
        page_order = page_order_list[i]
        if page_order == 0:
            last_page = ""
        else:
            #last_page = head[page_order-1]+ " &lt;&lt; &lt;a href='/get_page/" + head[page_order-1] + "'&gt;Previous&lt;/a&gt;"
            last_page = head[page_order-1] + " &lt;&lt; &lt;a href='"+head[page_order-1] + ".html'&gt;Previous&lt;/a&gt;"
        if page_order == len(head) - 1:
            # no next page
            next_page = ""
        else:
            #next_page = "&lt;a href='/get_page/"+head[page_order+1] + "'&gt;Next&lt;/a&gt; &gt;&gt; " + head[page_order+1]
            next_page = "&lt;a href='" + head[page_order+1] + ".html'&gt;Next&lt;/a&gt; &gt;&gt; " + head[page_order+1]
        if len(page_order_list) &gt; 1:
            return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" + \
                                      heading + "&lt;/h1&gt;" + page_content_list[i] + \
                                      "&lt;br /&gt;" + last_page + " "+ next_page + "&lt;br /&gt;&lt;hr&gt;"
            pagedata_duplicate = "&lt;h"+level[page_order] + "&gt;" + heading + "&lt;/h" + level[page_order]+"&gt;"+page_content_list[i]
            outstring_list.append(last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, html_escape(pagedata_duplicate), page_order))
        else:
            return_content += last_page + " " + next_page + "&lt;br /&gt;&lt;h1&gt;" + \
                                      heading + "&lt;/h1&gt;" + page_content_list[i] + \
                                      "&lt;br /&gt;" + last_page + " " + next_page

        pagedata += "&lt;h" + level[page_order] + "&gt;" + heading + \
                          "&lt;/h" + level[page_order] + "&gt;" + page_content_list[i]
        # 利用 html_escape() 將 specialchar 轉成只能顯示的格式
        outstring += last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, html_escape(pagedata), page_order)
    
    # edit=0 for viewpage
    if edit == 0:
        return set_css2() + '''&lt;div class='container'&gt;&lt;nav&gt;
        '''+ \
        directory + "&lt;div id=\"tipue_search_content\"&gt;" + return_content + \
        '''&lt;/div&gt;
        
    &lt;!-- footer --&gt;
      &lt;div class="container"&gt;
        &lt;div class="row pt-3 mx-auto"&gt;
            &lt;p&gt;
            &lt;!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --&gt;
            Copyright &amp;copy;&lt;script&gt;document.write(new Date().getFullYear());&lt;/script&gt; All rights reserved | This template is made with &lt;i class="icon-heart" aria-hidden="true"&gt;&lt;/i&gt; by &lt;a href="https://colorlib.com" target="_blank" &gt;Colorlib&lt;/a&gt;
            &lt;!-- Link back to Colorlib can't be removed. Template is licensed under CC BY 3.0. --&gt;
            &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;!-- for footer --&gt;
    
        &lt;/div&gt; &lt;!-- for site wrap --&gt;
            &lt;!-- &lt;script src="../cmsimde/static/chimper/js/jquery-3.3.1.min.js"&gt;&lt;/script&gt; --&gt;
            &lt;script src="../cmsimde/static/chimper/js/jquery-migrate-3.0.1.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/jquery-ui.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/popper.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/bootstrap.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/owl.carousel.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/jquery.stellar.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/jquery.countdown.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/jquery.magnific-popup.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/bootstrap-datepicker.min.js"&gt;&lt;/script&gt;
            &lt;script src="../cmsimde/static/chimper/js/aos.js"&gt;&lt;/script&gt;
            &lt;!--
            &lt;script src="../cmsimde/static/chimper/js/typed.js"&gt;&lt;/script&gt;
                    &lt;script&gt;
                    var typed = new Typed('.typed-words', {
                    strings: ["Web Apps"," WordPress"," Mobile Apps"],
                    typeSpeed: 80,
                    backSpeed: 80,
                    backDelay: 4000,
                    startDelay: 1000,
                    loop: true,
                    showCursor: true
                    });
                    &lt;/script&gt;
            --&gt;
            &lt;script src="../cmsimde/static/chimper/js/main.js"&gt;&lt;/script&gt;
        ''' + checkMath() + '''&lt;/body&gt;&lt;/html&gt;
        '''
    # enter edit mode
    else:
        # check if administrator
        if not isAdmin():
            redirect(url_for('login'))
        else:
            if len(page_order_list) &gt; 1:
                # 若碰到重複頁面頁印, 且要求編輯, 則導向 edit_page
                #return redirect("/edit_page")
                for i in range(len(page_order_list)):
                    outstring_duplicate += outstring_list[i] + "&lt;br /&gt;&lt;hr&gt;"
                return outstring_duplicate
            else:
            #pagedata = "&lt;h" + level[page_order]+"&gt;" + heading + "&lt;/h" + level[page_order] + "&gt;" + search_content(head, page, heading)
            #outstring = last_page + " " + next_page + "&lt;br /&gt;" + tinymce_editor(directory, html_escape(pagedata), page_order)
                return outstring


</t>
<t tx="yen.20210710222238.1">因為之前常有用戶在標題中放入特殊符號或 html 標註而無法順利完成分頁.

本次 2021.07.10 要將用戶選用的標題中特殊符號予以移除</t>
<t tx="yen.20210906215717.1">@app.route('/start_static/')
def start_static():
    # build directory
    #os.chdir("./../")
    server_address = ('localhost', static_port)
    httpd = http.server.HTTPServer(server_address, http.server.SimpleHTTPRequestHandler)
    httpd.socket = ssl.wrap_socket(httpd.socket,
                                   server_side=True,
                                   certfile='./localhost.crt',
                                   keyfile='./localhost.key',
                                   ssl_version=ssl.PROTOCOL_TLSv1_2)
    #print(os.getcwd())
    #print(static_port + " https server started")
    httpd.serve_forever()


</t>
</tnodes>
</leo_file>
